{"version":3,"sources":["../../src/util/smart-timeout.js"],"names":["cancelToken","Symbol","timeoutRefs","WeakSet","pause","delay","r","setTimeout","smartTimeout","fn","args","newToken","checkRun","has","delete","promise","then","cancel","token","immediate","resolve","delayedCall"],"mappings":";;;;;;;AAEA;;;;;;AAEA,IAAMA,cAAcC,OAAO,cAAP,CAApB;;AAEA,IAAMC,cAAc,IAAIC,OAAJ,EAApB;;AAEO,IAAMC,wBAASC,KAAD,IAA2C,uBAAYC,KAAKC,WAAWD,CAAX,EAAcD,KAAd,CAAjB,CAAzD;;AAEA,IAAMG,sCAAe,CAAIC,EAAJ,EAAkCJ,QAAiB,CAAnD,EAAsD,GAAGK,IAAzD,KAA4E;AACtG,MAAMC,WAAWV,OAAO,WAAP,CAAjB;AACA,MAAMW,WAAW,MAAM;AACrB,QAAIV,YAAYW,GAAZ,CAAgBF,QAAhB,CAAJ,EAA+B;AAC7BT,kBAAYY,MAAZ,CAAmBH,QAAnB;AACA,aAAOF,GAAG,GAAGC,IAAN,CAAP;AACD,KAHD,MAGO,OAAO,KAAP;AACR,GALD;AAMA,MAAMK,UAAUX,MAAMC,KAAN,EAAaW,IAAb,CAAkBJ,QAAlB,CAAhB;AACA;AACAG,UAAQf,WAAR,IAAuBW,QAAvB;AACA,SAAOI,OAAP;AACD,CAZM;;AAcP,IAAME,SAASF,WAAW;AACxB,MAAI,CAACA,OAAD,IAAY,CAACA,QAAQf,WAAR,CAAjB,EAAuC,OAAO,KAAP;AACvC,MAAMkB,QAAQH,QAAQf,WAAR,CAAd;AACA,SAAOE,YAAYW,GAAZ,CAAgBK,KAAhB,IACHhB,YAAYY,MAAZ,CAAmBI,KAAnB,CADG,GAEH,KAFJ;AAGD,CAND;;AAQO,IAAMC,gCAAY,CAAIV,EAAJ,EAAkC,GAAGC,IAArC,KACvB,mBACGU,OADH,GAEGJ,IAFH,CAEQ,MAAMP,GAAG,GAAGC,IAAN,CAFd,CADK;;AAMA,IAAMW,oCACX,CAAIZ,EAAJ,EAAkCJ,QAAiB,CAAnD,EAAsD,GAAGK,IAAzD,KACEN,MAAMC,KAAN,EACGW,IADH,CACQ,MAAMP,GAAG,GAAGC,IAAN,CADd,CAFG;;AAKPF,aAAaW,SAAb,GAAyBA,SAAzB;AACAX,aAAaO,OAAb,GAAuBM,WAAvB;AACAb,aAAaS,MAAb,GAAsBA,MAAtB;;kBAEeT,Y","file":"smart-timeout.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nconst cancelToken = Symbol('cancel token')\n\nconst timeoutRefs = new WeakSet\n\nexport const pause = (delay: number): Bluebird$Promise<void> => new Promise(r => setTimeout(r, delay))\n\nexport const smartTimeout = <T>(fn: (...args: Array<*>) => T, delay?: number = 0, ...args: Array<*>) => {\n  const newToken = Symbol('cancel id')\n  const checkRun = () => {\n    if (timeoutRefs.has(newToken)) {\n      timeoutRefs.delete(newToken)\n      return fn(...args)\n    } else return false\n  }\n  const promise = pause(delay).then(checkRun)\n  //$FlowIssue\n  promise[cancelToken] = newToken\n  return promise\n}\n\nconst cancel = promise => {\n  if (!promise || !promise[cancelToken]) return false\n  const token = promise[cancelToken]\n  return timeoutRefs.has(token)\n    ? timeoutRefs.delete(token)\n    : false\n}\n\nexport const immediate = <T>(fn: (...args: Array<*>) => T, ...args: Array<*>): Promise<T> =>\n  Promise\n    .resolve()\n    .then(() => fn(...args))\n\n\nexport const delayedCall =\n  <T>(fn: (...args: Array<*>) => T, delay?: number = 0, ...args: Array<*>) =>\n    pause(delay)\n      .then(() => fn(...args))\n\nsmartTimeout.immediate = immediate\nsmartTimeout.promise = delayedCall\nsmartTimeout.cancel = cancel\n\nexport default smartTimeout"]}