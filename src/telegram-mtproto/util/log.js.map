{"version":3,"sources":["../../src/util/log.js"],"names":["tagNormalize","e","arrify","fullNormalize","stringNormalize","String","length","genericLogger","LogEvent","constructor","log","values","print","isSingleObject","results","Object","Sheduler","queue","buffer","add","time","tagStr","map","unshift","first","other","firstLine","join","push","sheduleBuffer","logEvent","setInterval","sheduler","objects","Logger","moduleName","rest","fullModule","fullname","debug","logFunction","tag","logger","tags","disabledSubfn","disabledLogger","enabled","setLogger","customLogger"],"mappings":"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","file":"log.js","sourcesContent":["//@flow\n\n// import memoize from 'memoizee'\n\nimport Debug from 'debug'\n\nimport flatten from 'ramda/src/flatten'\nimport trim from 'ramda/src/trim'\nimport map from 'ramda/src/map'\nimport chain from 'ramda/src/chain'\nimport pipe from 'ramda/src/pipe'\nimport split from 'ramda/src/split'\nimport both from 'ramda/src/both'\nimport is from 'ramda/src/is'\nimport when from 'ramda/src/when'\nimport take from 'ramda/src/take'\nimport reject from 'ramda/src/reject'\nimport isEmpty from 'ramda/src/isEmpty'\nimport join from 'ramda/src/join'\nimport unapply from 'ramda/src/unapply'\nimport unnest from 'ramda/src/unnest'\nimport tail from 'ramda/src/tail'\n\nimport dTime from './dtime'\nimport { immediate } from './smart-timeout'\n\ntype VariString = string | string[]\n\ntype Normalize = (tag: string) => string\ntype FullNormalize = (tags: VariString[]) => string\n\nconst tagNormalize: Normalize = e => `[${e}]`\n\nconst arrify = unapply(unnest)\n\nconst fullNormalize: FullNormalize = pipe(\n  flatten,\n  chain(split(',')),\n  map(trim),\n  reject(isEmpty),\n  map(tagNormalize),\n  join('')\n)\n\nconst stringNormalize = when(\n    both(is(String), e => e.length > 50),\n    take(150)\n  )\n  // const isSimple = either(\n  //   is(String),\n  //   is(Number)\n  // )\n\n// const prettify = unless(\n//   isSimple,\n//   pretty\n// )\n\nconst genericLogger = Debug('telegram-mtproto')\n\nclass LogEvent {\n  log: typeof genericLogger\n  values: mixed[]\n  constructor(log: typeof genericLogger, values: mixed[]) {\n    this.log = log\n    this.values = values\n  }\n  print() {\n    this.log(...this.values)\n  }\n}\n\nconst isSingleObject = (results: any[]) =>\n  results.length === 1 &&\n  is(Object, results[0])\n\nclass Sheduler {\n  queue: LogEvent[][] = []\n  buffer: LogEvent[] = []\n  add = (log: typeof genericLogger,\n    time: string,\n    tagStr: string,\n    values: mixed[]) => {\n    const results = values.map(stringNormalize)\n    if (isSingleObject(results))\n      results.unshift('%O')\n    const first = results[0] || ''\n    const other = tail(results)\n    const firstLine = [tagStr, time, first].join('  ')\n    this.buffer.push(new LogEvent(log, [firstLine, ...other]))\n  }\n  sheduleBuffer = () => {\n    this.queue.push(this.buffer)\n    this.buffer = []\n  }\n  print = () => {\n    for (const buffer of this.queue)\n      for (const logEvent of buffer)\n        logEvent.print()\n    this.queue = []\n  }\n  constructor() {\n    setInterval(this.sheduleBuffer, 50)\n    setInterval(this.print, 300)\n  }\n}\n\nconst sheduler = new Sheduler\n\nconst Logger = (moduleName: VariString, ...rest: string[]) => {\n  const fullModule: string[] = arrify(moduleName, ...rest)\n  fullModule.unshift('telegram-mtproto')\n  const fullname = fullModule.join(':')\n  const debug = Debug(fullname)\n  const logFunction = (tag: string, objects: any[]) => {\n    const time = dTime()\n    immediate(sheduler.add, debug, time, tag, objects)\n  }\n  const logger = (...tags: VariString[]) => {\n    const tagStr = fullNormalize(tags)\n    return (...objects: any[]) => logFunction(tagStr, objects)\n  }\n\n  //eslint-disable-next-line\n  const disabledSubfn = (...objects: any[]) => {}\n  //eslint-disable-next-line\n  const disabledLogger = (...tags: VariString[]) => disabledSubfn\n\n  return debug.enabled\n    ? logger\n    : disabledLogger\n}\n\nexport const setLogger = (customLogger: Function) => {\n  Debug.log = customLogger\n}\n\nexport default Logger"]}