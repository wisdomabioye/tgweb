{"version":3,"sources":["../../../src/plugins/file-storage/file-storage.draft.js"],"names":["watchFile","require","console","log","update","FileSystemDriver","constructor","filepath","watcher","mtime","newTime","getTime","needUpdate","syncTime","toTimeString","syncTimeString","read","then","updateTime","interval","date","Date","str","now","mergeUpdate","write","obj","time","JSON","stringify","length","result","parse","FileStorageInstance","store","Map","driver","save","entries","load","clear","key","value","set","get","resolve","val","remove","keys","map","delete"],"mappings":"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","file":"file-storage.draft.js","sourcesContent":["\r\nimport Promise from 'bluebird'\r\nimport toPairs from 'ramda/src/toPairs'\r\nimport fromPairs from 'ramda/src/fromPairs'\r\n\r\n// import type { AsyncStorage } from '../index.h'\r\n\r\nconst { watchFile } = require('fs')\r\n\r\nimport { readData, writeData } from './fixtures'\r\n\r\nexport class FileSystemDriver {\r\n  filepath: string\r\n  syncTime: number\r\n  constructor(filepath: string) {\r\n    this.filepath = filepath\r\n    this.updateTime()\r\n    watchFile(filepath, { interval: 500 }, this.watcher)\r\n  }\r\n  get syncTimeString(): string {\r\n    const date = new Date(this.syncTime)\r\n    const str = date.toTimeString()\r\n    return str\r\n  }\r\n  updateTime(syncTime?: number) {\r\n    return this.syncTime = syncTime\r\n      ? syncTime\r\n      : Date.now()\r\n  }\r\n  async mergeUpdate(update: string, syncTime: number) {\r\n    if (syncTime >= this.syncTime) {\r\n      this.updateTime(syncTime)\r\n      await writeData(this.filepath, update)\r\n    }\r\n  }\r\n  async write(obj: any) {\r\n    const time = this.updateTime()\r\n    const str = JSON.stringify(obj)\r\n    await this.mergeUpdate(str, time)\r\n  }\r\n  async read(syncTime?: number) {\r\n    this.updateTime(syncTime)\r\n    let str = await readData(this.filepath)\r\n\r\n    if (str.length === 0) {\r\n      await this.write({})\r\n      this.updateTime()\r\n      str = await readData(this.filepath)\r\n    }\r\n    const result = JSON.parse(str)\r\n    return result\r\n  }\r\n\r\n  watcher = ({ mtime }: { mtime: Date }) => {\r\n    const newTime = mtime.getTime()\r\n    const needUpdate = this.syncTime < newTime\r\n    console.log(`watch curr`,\r\n                needUpdate,\r\n                mtime.toTimeString(),\r\n                this.syncTimeString)\r\n    if (needUpdate) {\r\n      this.read(newTime).then(\r\n        update => console.log('update', update)\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nclass FileStorageInstance {\r\n  store: Map<string, any> = new Map\r\n  driver: FileSystemDriver\r\n  constructor(filepath: string, store: { [key: string]: any }) {\r\n    this.driver = new FileSystemDriver(filepath)\r\n    this.save(store)\r\n  }\r\n  async save() {\r\n    const obj = fromPairs([...this.store.entries()])\r\n    await this.driver.write(obj)\r\n  }\r\n  load(obj: any) {\r\n    this.store.clear()\r\n    for (const [key, value] of toPairs(obj))\r\n      this.store.set(key, value)\r\n  }\r\n\r\n  get(key: string) {\r\n    return Promise.resolve(this.store.get(key))\r\n  }\r\n  set(key: string, val: any) {\r\n    this.store.set(key, val)\r\n    return Promise.resolve()\r\n  }\r\n  remove(...keys: string[]) {\r\n    return Promise.resolve(\r\n      keys.map(\r\n        key => this.store.delete(key)))\r\n  }\r\n  clear() {\r\n    this.store.clear()\r\n    return Promise.resolve()\r\n  }\r\n}\r\n\r\n/*const initializeFileStorage = async (filepath: string) => {\r\n  let needToCreate = false\r\n  try {\r\n    await checkAccess(filepath)\r\n  } catch (err) {\r\n    switch (err.code) {\r\n      case 'ENOENT': needToCreate = true; break\r\n      case 'EPERM' : throw err\r\n      default: throw err\r\n    }\r\n  }\r\n  if (needToCreate)\r\n    await createFile(filepath)\r\n\r\n  const storage = new FileStorageInstance(filepath, {})\r\n  return storage\r\n  // await pause(5e3)\r\n\r\n  // const readed = await storage.read()\r\n\r\n  // console.log(`readed`, storage.syncTimeString, readed)\r\n\r\n  // readed.field = { value: 'field' }\r\n  // readed.data = ['str', 48, { ok: null }]\r\n\r\n  // await pause()\r\n\r\n  // await storage.write(readed)\r\n\r\n  // await pause(5e3)\r\n\r\n  // const newReaded = await storage.read()\r\n\r\n  // console.log(`newReadedObj`, storage.syncTimeString, newReaded)\r\n\r\n}*/\r\n\r\n\r\n\r\n// export const FileStorage = (filepath: string): Promise<AsyncStorage> =>\r\n//   initializeFileStorage(filepath)\r\n\r\nexport default FileStorageInstance"]}