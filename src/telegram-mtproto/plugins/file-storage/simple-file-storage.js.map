{"version":3,"sources":["../../../src/plugins/file-storage/simple-file-storage.js"],"names":["log","SimpleFileStorage","constructor","filepath","data","init","save","str","JSON","stringify","get","key","pureData","parsed","parse","Date","now","resolve","set","val","remove","keys","clear"],"mappings":";;;;;;;AAEA;;;;AACA;;;;AAIA;;AAEA;;;;;;;;AACA,IAAMA,MAAM,aAAO,qBAAnB;;AAGA;;;;;;;;;;;;AAYO,MAAMC,iBAAN,CAAgD;;AAKrD;;;;;;;;;;AAUAC,cAAYC,QAAZ,EAA8BC,IAA9B,EAA2D;AAAA,SAb3DA,IAa2D,GAb9B,EAa8B;AAAA,SAZ3DC,IAY2D,GAZpD,KAYoD;;AACzD,SAAKF,QAAL,GAAgBA,QAAhB;AACA,QAAIC,QAAQ,IAAZ,EACE,KAAKA,IAAL,GAAYA,IAAZ;AACF;AACD;;AAEDE,SAAO;AACL,QAAMC,MAAMC,KAAKC,SAAL,CAAe,KAAKL,IAApB,CAAZ;AACA,WAAO,yBAAU,KAAKD,QAAf,EAAyBI,GAAzB,CAAP;AACD;;AAEKG,KAAN,CAAUC,GAAV,EAAuB;AAAA;;AAAA;AACrB,UAAI,CAAC,MAAKN,IAAV,EAAgB;AACd,YAAMO,WAAW,MAAM,wBAAS,MAAKT,QAAd,CAAvB;AACA,YAAMU,SAASL,KAAKM,KAAL,CAAWF,QAAX,CAAf;AACA,cAAKR,IAAL,GAAYS,MAAZ;AACAb,YAAI,KAAJ,EAAW,QAAX,EAAqBa,MAArB;AACA,cAAKR,IAAL,GAAYU,KAAKC,GAAL,EAAZ;AACD;AACD,UAAMZ,OAAO,MAAKA,IAAL,CAAUO,GAAV,CAAb;AACAX,UAAI,KAAJ,EAAY,OAAMW,GAAI,EAAtB,EAAyBP,IAAzB;AACA,aAAO,mBAASa,OAAT,CAAiBb,IAAjB,CAAP;AAVqB;AAWtB;;AAEKc,KAAN,CAAUP,GAAV,EAAuBQ,GAAvB,EAAgD;AAAA;;AAAA;AAC9C,aAAKf,IAAL,CAAUO,GAAV,IAAiBQ,GAAjB;AACAnB,UAAI,KAAJ,EAAY,OAAMW,GAAI,EAAtB,EAAyBQ,GAAzB;AACA,YAAM,OAAKb,IAAL,EAAN;AAH8C;AAI/C;;AAEKc,QAAN,CAAa,GAAGC,IAAhB,EAA+C;AAAA;;AAAA;AAC7C,aAAKjB,IAAL,GAAY,oBAAKiB,IAAL,EAAW,OAAKjB,IAAhB,CAAZ;AACAJ,UAAI,QAAJ,EAAcqB,IAAd;AACA,YAAM,OAAKf,IAAL,EAAN;AAH6C;AAI9C;;AAEKgB,OAAN,GAAc;AAAA;;AAAA;AACZ,aAAKlB,IAAL,GAAY,EAAZ;AACAJ,UAAI,OAAJ,EAAa,IAAb;AACA;AAHY;AAIb;AAxDoD;;QAA1CC,iB,GAAAA,iB;kBA2DEA,iB","file":"simple-file-storage.js","sourcesContent":["//@flow\n\nimport omit from 'ramda/src/omit'\nimport Bluebird from 'bluebird'\n\nimport type { AsyncStorage } from '../index.h'\n\nimport { readData, writeData } from './fixtures'\n\nimport Logger from '../../util/log'\nconst log = Logger`simple-file-storage`\n\n\n/**\n * ### *Basic* file storage realisation\n *\n * Limitations:\n * * `filepath` must exists\n * * `filepath` must be valid JSON (just `{}` for empty store)\n * * No auto close descriptor\n *\n * @export\n * @class SimpleFileStorage\n * @implements {AsyncStorage}\n */\nexport class SimpleFileStorage implements AsyncStorage {\n  filepath: string\n  data: { [key: string]: * } = {}\n  init = false\n\n  /**\n   * Usage\n   *\n   *     const storage = new SimpleFileStorage('./filestore.json')\n   *     const telegram = MTProto({ app: { storage } })\n   *\n   * @param {string} filepath Path to your file\n   * @param {object} [data] Import stored data (if you have so)\n   *\n   */\n  constructor(filepath: string, data?: { [key: string]: * }) {\n    this.filepath = filepath\n    if (data != null)\n      this.data = data\n    // setInterval(() => this.save(), 500)\n  }\n\n  save() {\n    const str = JSON.stringify(this.data)\n    return writeData(this.filepath, str)\n  }\n\n  async get(key: string) {\n    if (!this.init) {\n      const pureData = await readData(this.filepath)\n      const parsed = JSON.parse(pureData)\n      this.data = parsed\n      log('get', 'parsed')(parsed)\n      this.init = Date.now()\n    }\n    const data = this.data[key]\n    log('get', `key ${key}`)(data)\n    return Bluebird.resolve(data)\n  }\n\n  async set(key: string, val: any): Promise<void> {\n    this.data[key] = val\n    log('set', `key ${key}`)(val)\n    await this.save()\n  }\n\n  async remove(...keys: string[]): Promise<void> {\n    this.data = omit(keys, this.data)\n    log('remove')(keys)\n    await this.save()\n  }\n\n  async clear() {\n    this.data = {}\n    log('clear')('ok')\n    // await this.save()\n  }\n}\n\nexport default SimpleFileStorage"]}