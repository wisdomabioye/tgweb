{"version":3,"sources":["../../src/plugins/updates.js"],"names":["debug","AppChatsManager","a","b","pts","UpdatesManager","api","apiLayer","on","getUserID","getDifference","getChannelDifference","attach","updatesState","pendingPtsUpdates","pendingSeqUpdates","syncPending","syncLoading","seq","date","channelStates","myID","then","id","setState","state","Object","assign","auth","storage","get","popPendingSeqUpdate","nextSeq","pendingUpdatesData","updates","forEach","saveUpdate","seqAwaiting","ptsAwaiting","clearTimeout","timeout","popPendingPtsUpdate","channelID","curState","getChannelState","length","sort","curPts","goodPts","goodIndex","update","i","pts_count","slice","splice","forceGetDifference","processUpdateMessage","updateMessage","processOpts","seqStart","seq_start","processUpdate","_","isOut","flags","fromID","from_id","user_id","toID","chat_id","emit","message","apiMessage","differenceResult","qts","channelsUpdates","other_updates","updateNewMessage","new_messages","intermediate_state","channelState","channel","getChannelInput","limit","channel_id","map","updateNewChannelMessage","final","addChannelState","Error","undefined","options","to_id","popPts","popSeq","newPts","newPending","setTimeout","push","newSeqUpdate","console","log","result","seqSet"],"mappings":"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","file":"updates.js","sourcesContent":["// @flow\n\n// eslint-disable-next-line\nimport Promise from 'bluebird'\nimport Logger from '../util/log'\nconst debug = Logger`updates`\n\nimport { setUpdatesProcessor } from '../service/networker'\nimport type { ApiManagerInstance } from '../service/api-manager/index.h'\nimport type { TLFabric } from '../tl'\n\ntype PtsUpdate = {|\n  pts: number;\n  pts_count: number;\n|}\n\ntype SeqUpdate = {|\n  updates: Array<{||}>;\n  date: number;\n  seq: number;\n|}\n\ntype UpdatesState = {\n  pendingPtsUpdates: Array<PtsUpdate>;\n  pendingSeqUpdates: { [k: number]: SeqUpdate };\n  syncLoading: boolean;\n  syncPending: ?{\n    timeout: number;\n    ptsAwaiting?: boolean;\n    seqAwaiting?: number;\n  };\n  pts: number;\n  seq: number;\n  date: number;\n}\n\n// const AppPeersManager = null\n// const AppUsersManager = null\nconst AppChatsManager = null\n\nconst UpdatesManager = (api: ApiManagerInstance, { apiLayer, on }: TLFabric) => {\n  const updatesState: UpdatesState = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending      : null,\n    syncLoading      : true,\n    pts              : 0,\n    seq              : 0,\n    date             : 0\n  }\n  const channelStates: { [k: number]: UpdatesState } = {}\n\n  let myID = 0\n  getUserID().then(id => myID = id)\n\n  function setState(state: $Shape<UpdatesState>) {\n    Object.assign(updatesState, state)\n  }\n\n  async function getUserID() {\n    const auth = await api.storage.get('user_auth')\n    return auth.id || 0\n  }\n\n  function popPendingSeqUpdate() {\n    const nextSeq = updatesState.seq + 1\n    const pendingUpdatesData = updatesState.pendingSeqUpdates[nextSeq]\n    if (!pendingUpdatesData) {\n      return false\n    }\n    const updates = pendingUpdatesData.updates\n    updates.forEach(saveUpdate)\n    updatesState.seq = pendingUpdatesData.seq\n    if (pendingUpdatesData.date && updatesState.date < pendingUpdatesData.date) {\n      updatesState.date = pendingUpdatesData.date\n    }\n    delete updatesState.pendingSeqUpdates[nextSeq]\n\n    if (!popPendingSeqUpdate() &&\n      updatesState.syncPending &&\n      updatesState.syncPending.seqAwaiting &&\n      updatesState.seq >= updatesState.syncPending.seqAwaiting) {\n      if (!updatesState.syncPending.ptsAwaiting) {\n        clearTimeout(updatesState.syncPending.timeout)\n        updatesState.syncPending = null\n      } else {\n        delete updatesState.syncPending.seqAwaiting\n      }\n    }\n\n    return true\n  }\n\n  function popPendingPtsUpdate(channelID) {\n    const curState: UpdatesState = channelID ? getChannelState(channelID) : updatesState\n    if (!curState.pendingPtsUpdates.length) {\n      return false\n    }\n    curState.pendingPtsUpdates.sort((a, b) => a.pts - b.pts)\n\n    let curPts = curState.pts\n    let goodPts = false\n    let goodIndex = 0\n    let update\n    let i = 0\n    for (const update of curState.pendingPtsUpdates) {\n      curPts += update.pts_count\n      if (curPts >= update.pts) {\n        goodPts = update.pts\n        goodIndex = i\n      }\n      i++\n    }\n\n    if (!goodPts) {\n      return false\n    }\n\n    debug('pop pending pts updates')(goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1))\n\n    curState.pts = goodPts\n    for (let i = 0; i <= goodIndex; i++) {\n      update = curState.pendingPtsUpdates[i]\n      saveUpdate(update)\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1)\n\n    if (!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if (!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout)\n        curState.syncPending = null\n      } else {\n        delete curState.syncPending.ptsAwaiting\n      }\n    }\n\n    return true\n  }\n\n  function forceGetDifference() {\n    if (!updatesState.syncLoading) {\n      getDifference()\n    }\n  }\n\n  function processUpdateMessage(updateMessage: *) {\n    // return forceGetDifference()\n    const processOpts = {\n      date    : updateMessage.date,\n      seq     : updateMessage.seq,\n      seqStart: updateMessage.seq_start\n    }\n\n    switch (updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        forceGetDifference()\n        break\n\n      case 'updateShort':\n        processUpdate(updateMessage.update, processOpts)\n        break\n\n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        const isOut = updateMessage.flags & 2\n        const fromID = updateMessage.from_id || (isOut ? myID : updateMessage.user_id)\n        /* eslint-disable */\n        const toID = updateMessage.chat_id\n          ? -updateMessage.chat_id\n          : isOut ? updateMessage.user_id : myID\n        /* eslint-enable */\n\n        api.emit('updateShortMessage', {\n          processUpdate,\n          processOpts,\n          updateMessage,\n          fromID,\n          toID\n        })\n      }\n        break\n\n      case 'updatesCombined':\n      case 'updates':\n        api.emit('apiUpdate', updateMessage)\n        updateMessage.updates.forEach(update => processUpdate(update, processOpts))\n        break\n\n      default:\n        debug('Unknown update message')(updateMessage)\n    }\n  }\n\n  async function getDifference() {\n    if (!updatesState.syncLoading) {\n      updatesState.syncLoading = true\n      updatesState.pendingSeqUpdates = {}\n      updatesState.pendingPtsUpdates = []\n    }\n\n    if (updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout)\n      updatesState.syncPending = null\n    }\n\n    const differenceResult = await api('updates.getDifference', {\n      pts : updatesState.pts,\n      date: updatesState.date,\n      qts : -1\n    })\n    if (differenceResult._ === 'updates.differenceEmpty') {\n      debug('apply empty diff')(differenceResult.seq)\n      updatesState.date = differenceResult.date\n      updatesState.seq = differenceResult.seq\n      updatesState.syncLoading = false\n      api.emit('stateSynchronized')\n      return false\n    }\n\n    api.emit('difference', differenceResult)\n\n    // Should be first because of updateMessageID\n    // console.log(dT(), 'applying', differenceResult.other_updates.length, 'other updates')\n\n    // eslint-disable-next-line\n    const channelsUpdates = []\n    differenceResult.other_updates.forEach(update => {\n      switch (update._) {\n        case 'updateChannelTooLong':\n        case 'updateNewChannelMessage':\n        case 'updateEditChannelMessage':\n          processUpdate(update)\n          return\n      }\n      saveUpdate(update)\n    })\n\n    // console.log(dT(), 'applying', differenceResult.new_messages.length, 'new messages')\n    const updateNewMessage = apiMessage => saveUpdate({\n      _        : 'updateNewMessage',\n      message  : apiMessage,\n      pts      : updatesState.pts,\n      pts_count: 0\n    })\n    differenceResult.new_messages.forEach(updateNewMessage)\n\n    const { seq, pts, date } = differenceResult.intermediate_state || differenceResult.state\n    setState({ seq, pts, date })\n\n    // console.log(dT(), 'apply diff', updatesState.seq, updatesState.pts)\n\n    if (differenceResult._ == 'updates.differenceSlice') {\n      getDifference()\n    } else {\n      // console.log(dT(), 'finished get diff')\n      api.emit('stateSynchronized')\n      updatesState.syncLoading = false\n    }\n  }\n\n  async function getChannelDifference(channelID: number) {\n    const channelState: UpdatesState = getChannelState(channelID)\n    if (!channelState.syncLoading) {\n      channelState.syncLoading = true\n      channelState.pendingPtsUpdates = []\n    }\n    if (channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout)\n      channelState.syncPending = null\n    }\n    // console.log(dT(), 'Get channel diff', AppChatsManager.getChat(channelID), channelState.pts)\n    const differenceResult = await api('updates.getChannelDifference', {\n      channel: AppChatsManager.getChannelInput(channelID),\n      pts    : channelState.pts,\n      limit  : 30\n    })\n    // console.log(dT(), 'channel diff result', differenceResult)\n    channelState.pts = differenceResult.pts\n\n    if (differenceResult._ == 'updates.channelDifferenceEmpty') {\n      debug('apply channel empty diff')(differenceResult)\n      channelState.syncLoading = false\n      api.emit('stateSynchronized')\n      return false\n    }\n\n    if (differenceResult._ == 'updates.channelDifferenceTooLong') {\n      debug('channel diff too long')(differenceResult)\n      channelState.syncLoading = false\n      delete channelStates[channelID]\n      saveUpdate({ _: 'updateChannelReload', channel_id: channelID })\n      return false\n    }\n\n    api.emit('difference', differenceResult)\n\n    // Should be first because of updateMessageID\n    debug('applying')(differenceResult.other_updates.length, 'channel other updates')\n    differenceResult.other_updates.map(saveUpdate)\n\n    debug('applying')(differenceResult.new_messages.length, 'channel new messages')\n    const updateNewChannelMessage = apiMessage => saveUpdate({\n      _        : 'updateNewChannelMessage',\n      message  : apiMessage,\n      pts      : channelState.pts,\n      pts_count: 0\n    })\n    differenceResult.new_messages.forEach(updateNewChannelMessage)\n\n    debug('apply channel diff')(channelState.pts)\n\n    if (differenceResult._ == 'updates.channelDifference' &&\n      !differenceResult.final) {\n      getChannelDifference(channelID)\n    } else {\n      debug('finished channel get diff')()\n      api.emit('stateSynchronized')\n      channelState.syncLoading = false\n    }\n  }\n\n  function addChannelState(channelID: number, pts: ?number) {\n    if (!pts) {\n      throw new Error(`Add channel state without pts ${channelID}`)\n    }\n    if (channelStates[channelID] === undefined) {\n      channelStates[channelID] = {\n        pts,\n        seq              : 0,\n        date             : 0,\n        pendingSeqUpdates: {},\n        pendingPtsUpdates: [],\n        syncPending      : null,\n        syncLoading      : false\n      }\n      return true\n    }\n    return false\n  }\n\n  function getChannelState(channelID: number, pts?: ?number): UpdatesState {\n    if (channelStates[channelID] === undefined) {\n      addChannelState(channelID, pts)\n    }\n    return channelStates[channelID]\n  }\n\n  function processUpdate(update, options = {}) {\n    let channelID\n    switch (update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelID = update.message.to_id.channel_id || update.message.to_id.chat_id\n        break\n      case 'updateDeleteChannelMessages':\n        channelID = update.channel_id\n        break\n      case 'updateChannelTooLong':\n        channelID = update.channel_id\n        if (channelStates[channelID] === undefined) {\n          return false\n        }\n        break\n    }\n\n    const curState: UpdatesState = channelID ? getChannelState(channelID, update.pts) : updatesState\n\n    // console.log(dT(), 'process', channelID, curState.pts, update)\n\n    if (curState.syncLoading) {\n      return false\n    }\n\n    if (update._ == 'updateChannelTooLong') {\n      getChannelDifference(channelID || 0)\n      return false\n    }\n\n    let popPts\n    let popSeq\n\n    if (update.pts) {\n      const newPts = curState.pts + (update.pts_count || 0)\n      if (newPts < update.pts) {\n        // debug('Pts hole')(curState, update, channelID && AppChatsManager.getChat(channelID))\n        const newPending = {\n          timeout: setTimeout(() =>\n            channelID\n              ? getChannelDifference(channelID)\n              : getDifference(), 5000),\n        }\n        curState.pendingPtsUpdates.push(update)\n        if (!curState.syncPending) curState.syncPending = newPending\n        curState.syncPending.ptsAwaiting = true\n        return false\n      }\n      if (update.pts > curState.pts) {\n        curState.pts = update.pts\n        popPts = true\n      }\n      else if (update.pts_count) {\n        // console.warn(dT(), 'Duplicate update', update)\n        return false\n      }\n      if (channelID && options.date && updatesState.date < options.date) {\n        updatesState.date = options.date\n      }\n    }\n    else if (!channelID && options.seq > 0) {\n      const seq = options.seq\n      const seqStart = options.seqStart || seq\n\n      if (seqStart != curState.seq + 1) {\n        if (seqStart > curState.seq) {\n          // debug('Seq hole')(curState, curState.syncPending && curState.syncPending.seqAwaiting)\n          const updates = curState.pendingSeqUpdates\n          const newPending = {\n            timeout: setTimeout(() => getDifference(), 5000)\n          }\n          const newSeqUpdate = { seq, date: options.date, updates: [] }\n\n          if (updates[seqStart] === undefined) updates[seqStart] = newSeqUpdate\n          updates[seqStart].updates.push(update)\n\n          if (!curState.syncPending) curState.syncPending = newPending\n          if (!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart\n          }\n          return false\n        }\n      }\n\n      if (curState.seq != seq) {\n        curState.seq = seq\n        if (options.date && curState.date < options.date) {\n          curState.date = options.date\n        }\n        popSeq = true\n      }\n    }\n\n    saveUpdate(update)\n\n    if (popPts) {\n      popPendingPtsUpdate(channelID)\n    }\n    else if (popSeq) {\n      popPendingSeqUpdate()\n    }\n  }\n\n  function saveUpdate(update: *) {\n    api.emit('apiUpdate', update)\n  }\n\n  async function attach() {\n    on('seq', result =>\n      console.log('seq', result._, result, [...apiLayer.seqSet]))\n    const { seq, pts, date }: UpdatesState = await api('updates.getState', {})\n    setUpdatesProcessor(processUpdateMessage)\n    setState({ seq, pts, date })\n    setTimeout(() => setState({ syncLoading: false }), 1000)\n  }\n\n  return {\n    processUpdateMessage,\n    addChannelState,\n    attach\n  }\n}\n\nexport default UpdatesManager"]}