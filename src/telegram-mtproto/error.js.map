{"version":3,"sources":["../src/error.js"],"names":["Error","stackTraceLimit","MTError","getMessage","code","type","message","constructor","fullMessage","ErrorBadResponse","url","originalError","ErrorBadRequest","ErrorNotFound","err","config","TypeBufferIntError","getTypeBufferMessage","ctx","offset","length","intView","typeBuffer","AuthKeyError"],"mappings":";;;;;;;AAIAA,MAAMC,eAAN,GAAwB,EAAxB;;AAEO,MAAMC,OAAN,SAAsBF,KAAtB,CAA4B;AACjC,SAAOG,UAAP,CAAkBC,IAAlB,EAAgCC,IAAhC,EAA8CC,OAA9C,EAA+D;AAC7D,WAAQ,MAAKF,IAAK,KAAIC,IAAK,KAAIC,OAAQ,EAAvC;AACD;;AAGDC,cAAYH,IAAZ,EAA0BC,IAA1B,EAAwCC,OAAxC,EAAyD;AACvD,QAAME,cAAcN,QAAQC,UAAR,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,OAA/B,CAApB;AACA,UAAME,WAAN;AACA,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;AAXgC;;QAAtBH,O,GAAAA,O;AAcN,MAAMO,gBAAN,SAA+BP,OAA/B,CAAuC;AAE5CK,cAAYG,GAAZ,EAAyBC,gBAA+B,IAAxD,EAA8D;AAC5D,UAAM,GAAN,EAAW,sBAAX,EAAmCD,GAAnC;AACA,QAAIC,aAAJ,EACE,KAAKA,aAAL,GAAqBA,aAArB;AACH;AAN2C;;QAAjCF,gB,GAAAA,gB;AASN,MAAMG,eAAN,SAA8BV,OAA9B,CAAsC;AAE3CK,cAAYG,GAAZ,EAAyBC,gBAA+B,IAAxD,EAA8D;AAC5D,UAAM,GAAN,EAAW,qBAAX,EAAkCD,GAAlC;AACA,QAAIC,aAAJ,EACE,KAAKA,aAAL,GAAqBA,aAArB;AACH;AAN0C;;QAAhCC,e,GAAAA,e;AASN,MAAMC,aAAN,SAA4BX,OAA5B,CAAoC;AACzCK,cAAYO,GAAZ,EAAyB;AACvB,UAAM,GAAN,EAAW,gBAAX,EAA6BA,IAAIC,MAAJ,CAAWL,GAAxC;AACE;AACH;AAJwC;;QAA9BG,a,GAAAA,a;AAON,MAAMG,kBAAN,SAAiCd,OAAjC,CAAyC;AAC9C,SAAOe,oBAAP,CAA4BC,GAA5B,EAA6C;AAC3C,QAAMC,SAASD,IAAIC,MAAnB;AACA,QAAMC,SAASF,IAAIG,OAAJ,CAAYD,MAAZ,GAAqB,CAApC;AACA,WAAQ,gCAA+BD,MAAO,YAAWC,MAAO,EAAhE;AACD;;AAEDb,cAAYW,GAAZ,EAA6B;AAC3B,QAAMZ,UAAUU,mBAAmBC,oBAAnB,CAAwCC,GAAxC,CAAhB;AACA,UAAM,GAAN,EAAW,aAAX,EAA0BZ,OAA1B;AACA,SAAKgB,UAAL,GAAkBJ,GAAlB;AACD;AAX6C;;QAAnCF,kB,GAAAA,kB;AAcN,MAAMO,YAAN,SAA2BrB,OAA3B,CAAmC;AACxCK,gBAAc;AACZ,UAAM,GAAN,EAAW,gBAAX,EAA6B,EAA7B;AACD;AAHuC;QAA7BgB,Y,GAAAA,Y","file":"error.js","sourcesContent":["//@flow\n\nimport type { TypeBuffer } from './tl/type-buffer'\n\nError.stackTraceLimit = 25\n\nexport class MTError extends Error {\n  static getMessage(code: number, type: string, message: string) {\n    return `MT[${code}] ${type}: ${message}`\n  }\n  code: number\n  type: string\n  constructor(code: number, type: string, message: string) {\n    const fullMessage = MTError.getMessage(code, type, message)\n    super(fullMessage)\n    this.code = code\n    this.type = type\n  }\n}\n\nexport class ErrorBadResponse extends MTError {\n  originalError: Error\n  constructor(url: string, originalError?: Error | null = null) {\n    super(406, 'NETWORK_BAD_RESPONSE', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorBadRequest extends MTError {\n  originalError: Error\n  constructor(url: string, originalError?: Error | null = null) {\n    super(406, 'NETWORK_BAD_REQUEST', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorNotFound extends MTError {\n  constructor(err: Object) {\n    super(404, 'REQUEST_FAILED', err.config.url)\n      // this.originalError = err\n  }\n}\n\nexport class TypeBufferIntError extends MTError {\n  static getTypeBufferMessage(ctx: TypeBuffer) {\n    const offset = ctx.offset\n    const length = ctx.intView.length * 4\n    return `Can not get next int: offset ${offset} length: ${length}`\n  }\n  typeBuffer: TypeBuffer\n  constructor(ctx: TypeBuffer) {\n    const message = TypeBufferIntError.getTypeBufferMessage(ctx)\n    super(800, 'NO_NEXT_INT', message)\n    this.typeBuffer = ctx\n  }\n}\n\nexport class AuthKeyError extends MTError {\n  constructor() {\n    super(401, 'AUTH_KEY_EMPTY', '')\n  }\n}"]}