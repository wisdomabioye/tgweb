{"version":3,"sources":["../../src/tl/index.js"],"names":["TypeWriter","debug","PACKED","apiLayer","mtLayer","Serialization","constructor","mtproto","startMaxLength","api","mtApi","writer","maxLength","reset","getBytes","typed","getBytesTyped","getBytesPlain","storeMethod","methodName","params","layer","pred","funcs","get","Error","id","hasFlags","flags","storeObject","param","paramName","name","typeClass","fieldObj","isFlag","typeDefaults","has","isVector","Array","isArray","TypeError","length","entries","i","elem","returns","obj","type","field","substr","itemType","toLowerCase","Object","schema","selectSchema","predicate","isBare","constructorData","charAt","constructors","tlConst","condType","fieldBit","indexOf","split","emitter","wildcard","Deserialization","buffer","override","readInt","typeBuffer","fetchInt","fetchBool","offset","fetchObject","fetchIntBytes","bits","len","bytes","next","fetchRawBytes","byteView","byteLength","fetchPacked","compressed","uncompressed","newDeserializer","fetchVector","constructorCmp","result","push","fallback","typeProps","index","constructorsIndex","schemaFallback","finded","overrideKey","apply","value","seqSet","emit","getOffset","fetchEnd","isEnd","TL","on","bind"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport EventEmitter from 'eventemitter2'\nimport is from 'ramda/src/is'\nimport has from 'ramda/src/has'\n\nimport { uintToInt, intToUint, bytesToHex,\n  gzipUncompress, bytesToArrayBuffer } from '../bin'\n\nimport { readLong, readInt, readBytes, readString, readDouble } from './reader'\nimport { writeInt, writeIntBytes, writeBytes, writeDouble,\n  writeBool, writeLong } from './writer'\n\nimport Layout, { getFlags, isSimpleType, getTypeProps } from '../layout'\nimport { TypeBuffer, TypeWriter, getNakedType, getTypeConstruct } from './type-buffer'\nimport type { TLSchema } from './index.h'\n\n// import writer from '../util/file-log'\n\n// const storeMethodLog = writer('storeMethod')\n// const fetchObjectLog = writer('fetchObject')\n\nimport Logger from '../util/log'\nconst debug = Logger`tl`\n\nconst PACKED = 0x3072cfa1\n\ntype SerialConstruct = {\n  mtproto: boolean,\n  startMaxLength: number\n}\n\nlet apiLayer: Layout\nlet mtLayer: Layout\n\nexport class Serialization {\n  writer: TypeWriter = new TypeWriter()\n  mtproto: boolean\n  api: TLSchema\n  mtApi: TLSchema\n  apiLayer: Layout\n  mtLayer: Layout\n  constructor({ mtproto, startMaxLength }: SerialConstruct, api: TLSchema, mtApi: TLSchema) {\n    this.api = api\n    this.mtApi = mtApi\n\n    this.writer.maxLength = startMaxLength\n\n    this.writer.reset()\n    this.mtproto = mtproto\n  }\n\n  getBytes(typed?: boolean) {\n    if (typed)\n      return this.writer.getBytesTyped()\n    else\n      return this.writer.getBytesPlain()\n  }\n\n  storeMethod(methodName: string, params) {\n    // const logId = storeMethodLog.input({\n    //   methodName,\n    //   params\n    // })\n    const layer = this.mtproto\n      ? mtLayer\n      : apiLayer\n    const pred = layer.funcs.get(methodName)\n    if (!pred) throw new Error(`No method name ${methodName} found`)\n\n    writeInt(this.writer,\n             intToUint(`${pred.id}`),\n             `${methodName}[id]`)\n    if (pred.hasFlags) {\n      const flags = getFlags(pred)(params)\n      this.storeObject(flags, '#', `f ${methodName} #flags ${flags}`)\n    }\n    for (const param of pred.params) {\n      const paramName = param.name\n      const typeClass = param.typeClass\n      let fieldObj\n      if (!has(paramName, params)) {\n        if (param.isFlag) continue\n        else if (layer.typeDefaults.has(typeClass))\n          fieldObj = layer.typeDefaults.get(typeClass)\n        else if (isSimpleType(typeClass)) {\n          switch (typeClass) {\n            case 'int': fieldObj = 0; break\n            // case 'long': fieldObj = 0; break\n            case 'string': fieldObj = ' '; break\n            // case 'double': fieldObj = 0; break\n            case 'true': fieldObj = true; break\n            // case 'bytes': fieldObj = [0]; break\n          }\n        }\n        else throw new Error(`Method ${methodName} did not receive required argument ${paramName}`)\n      } else {\n        fieldObj = params[paramName]\n      }\n      if (param.isVector) {\n        if (!Array.isArray(fieldObj))\n          throw new TypeError(`Vector argument ${paramName} in ${methodName} required Array,`  +\n          //$FlowIssue\n          ` got ${fieldObj} ${typeof fieldObj}`)\n        writeInt(this.writer, 0x1cb5c415, `${paramName}[id]`)\n        writeInt(this.writer, fieldObj.length, `${paramName}[count]`)\n        for (const [ i, elem ] of fieldObj.entries())\n          this.storeObject(elem, param.typeClass, `${paramName}[${i}]`)\n      } else\n        this.storeObject(fieldObj, param.typeClass, `f ${methodName}(${paramName})`)\n    }\n    /*let condType\n    let fieldBit\n    for (const param of methodData.params) {\n      let type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(params[fieldBit[0]] & 1 << fieldBit[1])) {\n          continue\n        }\n        type = condType[1]\n      }\n      const paramName = param.name\n      const stored = params[paramName]\n      if (!stored)\n        stored = this.emptyOfType(type, schema)\n      if (!stored)\n        throw new Error(`Method ${methodName}.`+\n          ` No value of field ${ param.name } recieved and no Empty of type ${ param.type }`)\n      this.storeObject(stored, type, `f ${methodName}(${paramName})`)\n    }*/\n\n\n    // storeMethodLog.output(logId, {\n    //   pred,\n    //   writer: this.writer\n    // })\n    return pred.returns\n  }\n  /*emptyOfType(ofType, schema: TLSchema) {\n    const resultConstruct = schema.constructors.find(\n      ({ type, predicate }: TLConstruct) =>\n        type === ofType &&\n        predicate.indexOf('Empty') !== -1)\n    return resultConstruct\n      ? { _: resultConstruct.predicate }\n      : null\n  }*/\n  storeObject(obj: *, type: string, field: string) {\n    switch (type) {\n      case '#':\n      case 'int':\n        return writeInt(this.writer, obj, field)\n      case 'long':\n        return writeLong(this.writer, obj, field)\n      case 'int128':\n        return writeIntBytes(this.writer, obj, 128, field)\n      case 'int256':\n        return writeIntBytes(this.writer, obj, 256, field)\n      case 'int512':\n        return writeIntBytes(this.writer, obj, 512, field)\n      case 'string':\n        return writeBytes(this.writer, obj, `${field}:string`)\n      case 'bytes':\n        return writeBytes(this.writer, obj, field)\n      case 'double':\n        return writeDouble(this.writer, obj, field)\n      case 'Bool':\n        return writeBool(this.writer, obj, field)\n      case 'true':\n        return\n    }\n\n    if (Array.isArray(obj)) {\n      if (type.substr(0, 6) == 'Vector')\n        writeInt(this.writer, 0x1cb5c415, `${field}[id]`)\n      else if (type.substr(0, 6) != 'vector') {\n        throw new Error(`Invalid vector type ${  type}`)\n      }\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      writeInt(this.writer, obj.length, `${field}[count]`)\n      for (let i = 0; i < obj.length; i++) {\n        this.storeObject(obj[i], itemType, `${field  }[${  i  }]`)\n      }\n      return true\n    }\n    else if (type.substr(0, 6).toLowerCase() == 'vector') {\n      throw new Error('Invalid vector object')\n    }\n\n    if (!is(Object, obj))\n      throw new Error(`Invalid object for type ${  type}`)\n\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\n\n    const predicate = obj['_']\n    let isBare = false\n    let constructorData = false\n    isBare = type.charAt(0) == '%'\n    if (isBare)\n      type = type.substr(1)\n\n\n    for (const tlConst of schema.constructors) {\n      if (tlConst.predicate == predicate) {\n        constructorData = tlConst\n        break\n      }\n    }\n\n    if (!constructorData)\n      throw new Error(`No predicate ${predicate} found`)\n\n    if (predicate == type)\n      isBare = true\n\n    if (!isBare)\n      writeInt(this.writer,\n               intToUint(constructorData.id),\n               `${field}.${predicate}[id]`)\n\n    let condType\n    let fieldBit\n\n    for (const param of constructorData.params) {\n      type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(obj[fieldBit[0]] & 1 << fieldBit[1])) {\n          continue\n        }\n        type = condType[1]\n      }\n\n      this.storeObject(obj[param.name], type, `${field}.${  predicate  }.${  param.name  }`)\n    }\n\n    return constructorData.type\n  }\n\n}\n\nconst emitter = new EventEmitter({ wildcard: true })\n\nexport class Deserialization {\n  typeBuffer: TypeBuffer\n  override: Object\n  mtproto: boolean\n  api: TLSchema\n  mtApi: TLSchema\n  emitter: EventEmitter\n  constructor(buffer: Buffer, { mtproto, override }: DConfig, api: TLSchema, mtApi: TLSchema) {\n    this.api = api\n    this.mtApi = mtApi\n    this.override = override\n\n    this.typeBuffer = new TypeBuffer(buffer)\n    this.mtproto = mtproto\n    this.emitter = emitter\n\n    // const fetchObject = this.fetchObject.bind(this)\n\n    // const mock = (type, field) => {\n    //   const logId = fetchObjectLog.input({\n    //     type,\n    //     typeBuffer: this.typeBuffer,\n    //     field\n    //   })\n    //   const result = fetchObject(type, field)\n    //   fetchObjectLog.output(logId, {\n    //     typeBuffer: this.typeBuffer,\n    //     result\n    //   })\n    //   return result\n    // }\n    // this.fetchObject = mock\n  }\n\n  // log('int')(field, i.toString(16), i)\n  readInt = (field: string) =>\n    readInt(this.typeBuffer, field)\n\n  fetchInt(field: string = '') {\n    return this.readInt(`${ field }:int`)\n  }\n\n  fetchBool(field: string = '') {\n    const i = this.readInt(`${ field }:bool`)\n    switch (i) {\n      case 0x997275b5: return true\n      case 0xbc799737: return false\n      default: {\n        this.typeBuffer.offset -= 4\n        return this.fetchObject('Object', field)\n      }\n    }\n  }\n  fetchIntBytes(bits: number, field: string = '') {\n    if (bits % 32)\n      throw new Error(`Invalid bits: ${bits}`)\n\n    const len = bits / 8\n\n    const bytes = this.typeBuffer.next(len)\n\n    debug(`int bytes`)(bytesToHex(bytes), `${ field }:int${  bits}`)\n\n    return bytes\n  }\n\n  fetchRawBytes(len: number | false, field: string = '') {\n    if (len === false) {\n      len = this.readInt(`${ field }_length`)\n      if (len > this.typeBuffer.byteView.byteLength)\n        throw new Error(`Invalid raw bytes length: ${  len  }, buffer len: ${this.typeBuffer.byteView.byteLength}`)\n    }\n    const bytes = this.typeBuffer.next(len)\n    debug(`raw bytes`)(bytesToHex(bytes), field)\n\n    return bytes\n  }\n\n  fetchPacked(type, field: string = '') {\n    const compressed = readBytes( this.typeBuffer, `${field}[packed_string]`)\n    const uncompressed = gzipUncompress(compressed)\n    const buffer = bytesToArrayBuffer(uncompressed)\n    const newDeserializer = new Deserialization(\n      buffer, {\n        mtproto : this.mtproto,\n        override: this.override\n      },\n      this.api, this.mtApi)\n\n    return newDeserializer.fetchObject(type, field)\n  }\n\n  fetchVector(type: string, field: string = '') {\n    // const typeProps = getTypeProps(type)\n    if (type.charAt(0) === 'V') {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n      if (constructorCmp !== 0x1cb5c415)\n        throw new Error(`Invalid vector constructor ${constructor}`)\n    }\n    const len = this.readInt(`${field}[count]`)\n    const result = []\n    if (len > 0) {\n      const itemType = type.substr(7, type.length - 8) // for \"Vector<itemType>\"\n      for (let i = 0; i < len; i++)\n        result.push(this.fetchObject(itemType, `${field}[${i}]`))\n    }\n\n    return result\n  }\n\n  fetchObject(type, field: string = '') {\n\n    switch (type) {\n      case '#':\n      case 'int':\n        return this.fetchInt(field)\n      case 'long':\n        return readLong(this.typeBuffer, field)\n      case 'int128':\n        return this.fetchIntBytes(128, field)\n      case 'int256':\n        return this.fetchIntBytes(256, field)\n      case 'int512':\n        return this.fetchIntBytes(512, field)\n      case 'string':\n        return readString(this.typeBuffer, field)\n      case 'bytes':\n        return readBytes(this.typeBuffer, field)\n      case 'double':\n        return readDouble(this.typeBuffer, field)\n      case 'Bool':\n        return this.fetchBool(field)\n      case 'true':\n        return true\n    }\n    let fallback\n    field = field || type || 'Object'\n\n    // const layer = this.mtproto\n    //   ? mtLayer\n    //   : apiLayer\n    const typeProps = getTypeProps(type)\n    // layer.typesById\n\n    if (typeProps.isVector)\n      return this.fetchVector(type, field)\n\n    const schema = selectSchema(this.mtproto, this.api, this.mtApi)\n    let predicate = false\n    let constructorData = false\n\n    if (typeProps.isBare)\n      constructorData = getNakedType(type, schema)\n    else {\n      const constructor = this.readInt(`${field}[id]`)\n      const constructorCmp = uintToInt(constructor)\n\n      if (constructorCmp === PACKED)\n        return this.fetchPacked(type, field)\n\n      let index = schema.constructorsIndex\n      if (!index) {\n        schema.constructorsIndex = index = {}\n        for (let i = 0; i < schema.constructors.length; i++)\n          index[schema.constructors[i].id] = i\n      }\n      const i = index[constructorCmp]\n      if (i)\n        constructorData = schema.constructors[i]\n\n      fallback = false\n      if (!constructorData && this.mtproto) {\n        const schemaFallback = this.api\n        const finded = getTypeConstruct(constructorCmp, schemaFallback)\n        if (finded) {\n          constructorData = finded\n          delete this.mtproto\n          fallback = true\n        }\n      }\n      if (!constructorData) {\n        throw new Error(`Constructor not found: ${constructor} ${this.fetchInt()} ${this.fetchInt()}`)\n      }\n    }\n\n    predicate = constructorData.predicate\n\n    const result = { '_': predicate }\n    const overrideKey = (this.mtproto ? 'mt_' : '') + predicate\n\n    if (this.override[overrideKey]) {\n      this.override[overrideKey].apply(this, [result, `${field}[${predicate}]`])\n    } else {\n      for (const param of constructorData.params) {\n        type = param.type\n        // if (type === '#' && isNil(result.pFlags))\n        //   result.pFlags = {}\n        if (type.indexOf('?') !== -1) {\n          const condType = type.split('?')\n          const fieldBit = condType[0].split('.')\n          if (!(result[fieldBit[0]] & 1 << fieldBit[1]))\n            continue\n          type = condType[1]\n        }\n        const paramName = param.name\n        const value = this.fetchObject(type, `${field}[${predicate}][${paramName}]`)\n\n        result[paramName] = value\n      }\n    }\n\n    if (fallback)\n      this.mtproto = true\n\n    if (apiLayer.seqSet.has(predicate)) {\n      this.emitter.emit('seq', result)\n    }\n\n    return result\n  }\n\n  getOffset() {\n    return this.typeBuffer.offset\n  }\n\n  fetchEnd() {\n    if (!this.typeBuffer.isEnd())\n      throw new Error('Fetch end with non-empty buffer')\n    return true\n  }\n\n}\n\nconst selectSchema = (mtproto: boolean, api: TLSchema, mtApi: TLSchema) => mtproto\n  ? mtApi\n  : api\n\ntype DConfig = {\n  mtproto: boolean,\n  override: Object\n}\n\nexport type DeserializationFabric = (\n  buffer: Buffer,\n  config?: {\n    mtproto?: boolean,\n    override?: Object\n  }) => Deserialization\n\nexport type SerializationFabric = (\n  config?: {\n    mtproto?: boolean,\n    startMaxLength?: number\n  }) => Serialization\n\nexport type TLFabric = {\n  apiLayer: Layout,\n  mtLayer: Layout,\n  Serialization: SerializationFabric,\n  Deserialization: DeserializationFabric\n}\n\nexport const TL = (api: TLSchema, mtApi: TLSchema) => ({\n  on           : emitter.on.bind(emitter),\n  apiLayer     : !apiLayer ? apiLayer = new Layout(api) : apiLayer,\n  mtLayer      : !mtLayer ? mtLayer = new Layout(mtApi) : mtLayer,\n  Serialization: ({ mtproto = false, startMaxLength = 2048 /* 2Kb */ } = {}) =>\n    new Serialization({ mtproto, startMaxLength }, api, mtApi),\n  Deserialization: (buffer: Buffer, { mtproto = false, override = {} }: DConfig = {}) =>\n    new Deserialization(buffer, { mtproto, override }, api, mtApi)\n})\n\n\nexport { TypeWriter } from './type-buffer'\nexport default TL\n"]}