{"version":3,"sources":["../src/crypto.js"],"names":["convertIfArray","Array","webWorker","taskID","awaiting","webCrypto","window","crypto","subtle","webkitSubtle","msCrypto","useWebCrypto","digest","useSha1Crypto","useSha256Crypto","finalizeTask","result","deferred","resolve","isCryptoTask","workerEnable","Worker","e","data","console","info","tmpWorker","error","stack","TmpWorker","require","onmessage","onerror","postMessage","performTaskWorker","task","params","embed","promise","sha1Hash","bytes","bytesTyped","name","then","immediate","sha256Hash","aesEncrypt","keyBytes","ivBytes","aesDecrypt","encryptedBytes","factorize","modPow","x","y","m","CryptoWorker"],"mappings":"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","file":"crypto.js","sourcesContent":["import when from 'ramda/src/when'\nimport is from 'ramda/src/is'\nimport identity from 'ramda/src/identity'\nimport has from 'ramda/src/has'\nimport both from 'ramda/src/both'\nimport isNode from 'detect-node'\n\nimport blueDefer from './util/defer'\nimport smartTimeout from './util/smart-timeout'\nimport { convertToUint8Array, sha1HashSync, sha256HashSync,\n  aesEncryptSync, aesDecryptSync, convertToByteArray, convertToArrayBuffer,\n  pqPrimeFactorization, bytesModPow } from './bin'\n\nconst convertIfArray = when(is(Array), convertToUint8Array)\nlet webWorker = !isNode\nlet taskID = 0\nconst awaiting = {}\nconst webCrypto = isNode\n  ? false\n  //eslint-disable-next-line\n  : window.crypto.subtle || window.crypto.webkitSubtle //TODO remove browser depends\n  //eslint-disable-next-line\n  || window.msCrypto && window.msCrypto.subtle\nconst useWebCrypto = webCrypto && !!webCrypto.digest\nlet useSha1Crypto = useWebCrypto\nlet useSha256Crypto = useWebCrypto\nconst finalizeTask = (taskID, result) => {\n  const deferred = awaiting[taskID]\n  if (deferred) {\n    // console.log(rework_d_T(), 'CW done')\n    deferred.resolve(result) //TODO Possibly, can be used as\n    delete awaiting[taskID]  //\n  }                          //    deferred = Promise.resolve()\n}                            //    deferred.resolve( result )\n\nconst isCryptoTask = both(has('taskID'), has('result'))\n\n//eslint-disable-next-line\nconst workerEnable = !isNode && window.Worker\nif (workerEnable) {\n  const TmpWorker = require('worker-loader?inline!./worker.js')\n  const tmpWorker = new TmpWorker()\n  // tmpWorker.onmessage = function(event) {\n  //   console.info('CW tmpWorker.onmessage', event && event.data)\n  // }\n  tmpWorker.onmessage = e => {\n    if (e.data === 'ready') {\n      console.info('CW ready')\n    } else if (!isCryptoTask(e.data)) {\n      console.info('Not crypto task', e, e.data)\n      return e\n    } else\n    return webWorker\n      ? finalizeTask(e.data.taskID, e.data.result)\n      : webWorker = tmpWorker\n  }\n\n  tmpWorker.onerror = function(error) {\n    console.error('CW error', error, error.stack)\n    webWorker = false\n  }\n  tmpWorker.postMessage('b')\n  webWorker = tmpWorker\n}\n\nconst performTaskWorker = (task, params, embed) => {\n  // console.log(rework_d_T(), 'CW start', task)\n  const deferred = blueDefer()\n\n  awaiting[taskID] = deferred\n\n  params.task = task\n  params.taskID = taskID\n  ;(embed || webWorker).postMessage(params)\n\n  taskID++\n\n  return deferred.promise\n}\n\nconst sha1Hash = bytes => {\n  if (useSha1Crypto) {\n    // We don't use buffer since typedArray.subarray(...).buffer gives the whole buffer and not sliced one.\n    // webCrypto.digest supports typed array\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-1' }, bytesTyped).then(digest =>\n      // console.log(rework_d_T(), 'Native sha1 done')\n        digest, e => {\n      console.error('Crypto digest error', e)\n      useSha1Crypto = false\n      return sha1HashSync(bytes)\n    })\n  }\n  return smartTimeout.immediate(sha1HashSync, bytes)\n}\n\nconst sha256Hash = bytes => {\n  if (useSha256Crypto) {\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-256' }, bytesTyped)\n      .then(identity\n        // console.log(rework_d_T(), 'Native sha1 done')\n        , e => {\n          console.error('Crypto digest error', e)\n          useSha256Crypto = false\n          return sha256HashSync(bytes)\n        })\n  }\n  return smartTimeout.immediate(sha256HashSync, bytes)\n}\n\nconst aesEncrypt = (bytes, keyBytes, ivBytes) =>\n  smartTimeout.immediate(() => convertToArrayBuffer(aesEncryptSync(bytes, keyBytes, ivBytes)))\n\nconst aesDecrypt = (encryptedBytes, keyBytes, ivBytes) =>\n  smartTimeout.immediate(() => convertToArrayBuffer(\n    aesDecryptSync(encryptedBytes, keyBytes, ivBytes)))\n\nconst factorize = bytes => {\n  bytes = convertToByteArray(bytes)\n  return webWorker\n    ? performTaskWorker('factorize', { bytes })\n    : smartTimeout.immediate(pqPrimeFactorization, bytes)\n}\n\nconst modPow = (x, y, m) => webWorker\n  ? performTaskWorker('mod-pow', {\n    x,\n    y,\n    m\n  })\n  : smartTimeout.immediate(bytesModPow, x, y, m)\n\nexport const CryptoWorker = {\n  sha1Hash,\n  sha256Hash,\n  aesEncrypt,\n  aesDecrypt,\n  factorize,\n  modPow\n}\n\nexport default CryptoWorker"]}