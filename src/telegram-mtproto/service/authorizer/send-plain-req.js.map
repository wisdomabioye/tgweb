{"version":3,"sources":["../../../src/service/authorizer/send-plain-req.js"],"names":["is404","notError","err","error","reject","SendPlain","Serialization","Deserialization","onlySendPlainReq","url","requestBuffer","requestLength","byteLength","requestArray","Int32Array","header","headBox","writer","headerBuffer","getBuffer","headerArray","headerLength","resultBuffer","ArrayBuffer","resultArray","set","length","requestData","reqPromise","post","responseType","props","req","onlySendPlainErr","onlySendPlainRes","data","deserializer","mtproto","ctx","typeBuffer","e","sendPlainReq","then"],"mappings":"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","file":"send-plain-req.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport has from 'ramda/src/has'\nimport pathEq from 'ramda/src/pathEq'\nimport allPass from 'ramda/src/allPass'\n\nimport httpClient from '../../http'\nimport { ErrorBadResponse, ErrorNotFound } from '../../error'\nimport { generateID } from '../time-manager'\nimport { readLong, readInt } from '../../tl/reader'\nimport { writeLong, writeLongP, writeInt } from '../../tl/writer'\n\nimport type { TLFabric } from '../../tl'\n\nconst is404 = pathEq(['response', 'status'], 404)\nconst notError = allPass([has('message'), has('type')])\n\nconst SendPlain = ({ Serialization, Deserialization }: TLFabric) => {\n  const onlySendPlainReq = (url: string, requestBuffer: ArrayBuffer) => {\n    const requestLength = requestBuffer.byteLength,\n          requestArray = new Int32Array(requestBuffer)\n\n    const header = Serialization()\n    const headBox = header.writer\n\n    writeLongP(headBox, 0, 0, 'auth_key_id') // Auth key\n    writeLong(headBox, generateID(), 'msg_id') // Msg_id\n    writeInt(headBox, requestLength, 'request_length')\n\n    const headerBuffer: ArrayBuffer = headBox.getBuffer(),\n          headerArray = new Int32Array(headerBuffer)\n    const headerLength = headerBuffer.byteLength\n\n    const resultBuffer = new ArrayBuffer(headerLength + requestLength),\n          resultArray = new Int32Array(resultBuffer)\n\n    resultArray.set(headerArray)\n    resultArray.set(requestArray, headerArray.length)\n\n    const requestData = resultArray\n    // let reqPromise\n    // try {\n    const reqPromise = httpClient.post(url, requestData, {\n      responseType: 'arraybuffer'\n    })\n    // } catch (e) {\n    //   reqPromise = Promise.reject(new ErrorBadResponse(url, e))\n    // }\n    return Promise.props({ url, req: reqPromise })\n  }\n\n  const onlySendPlainErr = (err) => {\n    let error\n    switch (true) {\n      case is404(err):\n        error = new ErrorNotFound(err)\n        break\n      case notError(err):\n        error = new ErrorBadResponse('', err)\n        break\n      default:\n        error = err\n    }\n    return Promise.reject(error)\n  }\n\n  const onlySendPlainRes = ({ url, req }) => {\n    if (!req.data || !req.data.byteLength)\n      return Promise.reject(new ErrorBadResponse(url))\n    let deserializer\n    try {\n      deserializer = Deserialization(req.data, { mtproto: true })\n      const ctx = deserializer.typeBuffer\n      readLong(ctx, 'auth_key_id')\n      readLong(ctx, 'msg_id')\n      readInt(ctx, 'msg_len')\n    } catch (e) {\n      return Promise.reject(new ErrorBadResponse(url, e))\n    }\n\n    return deserializer\n  }\n\n  const sendPlainReq = (url: string, requestBuffer: ArrayBuffer) =>\n    onlySendPlainReq(url, requestBuffer)\n      .then(\n        onlySendPlainRes,\n        onlySendPlainErr)\n\n  return sendPlainReq\n}\n\nexport default SendPlain"]}