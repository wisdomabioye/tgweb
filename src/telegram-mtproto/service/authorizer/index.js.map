{"version":3,"sources":["../../../src/service/authorizer/index.js"],"names":["log","primeHex","concat","e1","e2","tmpAesKey","serverNonce","newNonce","arr1","arr2","key1","key2","slice","tmpAesIv","arr3","minSize","Math","ceil","getTwoPow","arr","Array","fill","unshift","hex","join","res","leemonTwoPow","Auth","Serialization","Deserialization","select","prepare","mtpSendReqPQ","mtpSendReqDhParams","mtpSendSetClientDhParams","sendPlainReq","auth","deferred","nonce","request","mtproto","reqBox","writer","storeMethod","deserializer","dcUrl","getBuffer","err","console","error","message","reject","response","fetchObject","_","Error","server_nonce","pq","fingerprints","server_public_key_fingerprints","key","publicKey","p","q","it","factorize","stack","data","dataBox","storeObject","new_nonce","dataWithHash","getBytes","public_key_fingerprint","fingerprint","encrypted_data","newNonceHash","new_nonce_hash","mtpDecryptServerDhDataAnswer","encrypted_answer","encryptedAnswer","answerWithHash","hash","answerWithPadding","buffer","g","dhPrime","dh_prime","gA","g_a","serverTime","server_time","retry","mtpVerifyDhParams","offset","getOffset","localTime","innerLog","dhPrimeHex","dhPrimeLeemon","gALeemon","dhDec","case1","case2","case3","dhSubPow","case4","gBytes","toString","b","gB","modPow","retry_id","g_b","encryptedData","authKey","authKeyHash","authKeyAux","authKeyID","newNonceHash1","new_nonce_hash1","serverSalt","resolve","newNonceHash2","new_nonce_hash2","newNonceHash3","new_nonce_hash3","authChain","then","mtpAuth","dcID","cached","promise","onFail","catch"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport blueDefer from '../../util/defer'\nimport { immediate } from '../../util/smart-timeout'\nimport CryptoWorker from '../../crypto'\n\nimport random from '../secure-random'\nimport { applyServerTime, dTime, tsNow } from '../time-manager'\n\nimport { bytesCmp, bytesToHex, sha1BytesSync,\n  aesEncryptSync, rsaEncrypt, aesDecryptSync, bytesToArrayBuffer,\n  bytesFromHex, bytesXor, generateNonce } from '../../bin'\nimport { bpe, str2bigInt, one,\n    dup, sub_, sub, greater } from '../../vendor/leemon'\n\nimport Logger from '../../util/log'\n\nconst log = Logger`auth`\n\n// import { ErrorBadResponse } from '../../error'\n\nimport SendPlainReq from './send-plain-req'\n\nimport type { TLFabric } from '../../tl'\n\nconst primeHex = 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d93' +\n  '0f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f6945' +\n  '8705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4a' +\n  'c8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba7' +\n  '4d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9c' +\n  'a3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851' +\n  'f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b'\n\nconst concat = (e1, e2) => [...e1, ...e2]\n\nconst tmpAesKey = (serverNonce, newNonce) => {\n  const arr1 = concat(newNonce, serverNonce)\n  const arr2 = concat(serverNonce, newNonce)\n  const key1 = sha1BytesSync(arr1)\n  const key2 = sha1BytesSync(arr2).slice(0, 12)\n  return key1.concat(key2)\n}\n\nconst tmpAesIv = (serverNonce, newNonce) => {\n  const arr1 = concat(serverNonce, newNonce)\n  const arr2 = concat(newNonce, newNonce)\n  const arr3 = newNonce.slice(0, 4)\n  const key1 = sha1BytesSync(arr1)\n  const key2 = sha1BytesSync(arr2)\n  return key1.slice(12).concat(key2, arr3)\n}\n\ntype Defer = {\n  resolve: (res: any) => void,\n  reject: (res: any) => void,\n  promise: Promise<any>\n}\n\ntype Cached = {[id: number]: Defer}\n\nexport type Args = {\n  select: (fingerprints: string[]) => Promise<{\n    fingerprint: string,\n    exponent: string,\n    modulus: string\n  } | false>,\n  prepare: () => Promise<void>\n}\n\ntype Bytes = number[]\n\ntype AuthBasic = {\n  dcID: number,\n  dcUrl: string,\n  nonce: Bytes,\n  deferred: Defer,\n  serverNonce: Bytes,\n  pq: Bytes,\n  fingerprints: Bytes,\n  p: number,\n  q: number,\n  publicKey: {\n    fingerprint: string\n  },\n  newNonce: number[],\n  b: Bytes,\n  g: number,\n  gA: any,\n  retry: number,\n  dhPrime: any,\n  serverTime: number,\n  localTime: number,\n  tmpAesKey: Bytes,\n  tmpAesIv: Bytes,\n  authKeyID: Bytes,\n  authKey: string,\n  serverSalt: Bytes\n}\n\nconst minSize = Math.ceil(64 / bpe) + 1\n\nconst getTwoPow = () => { //Dirty cheat to count 2^(2048 - 64)\n                          //This number contains 496 zeroes in hex\n  const arr = Array(496)\n    .fill('0')\n  arr.unshift('1')\n  const hex = arr.join('')\n  const res = str2bigInt(hex, 16, minSize)\n  return res\n}\n\nconst leemonTwoPow = getTwoPow()\n\nexport const Auth = ({ Serialization, Deserialization }: TLFabric,\n                     { select, prepare }: Args) => {\n  const sendPlainReq = SendPlainReq({ Serialization, Deserialization })\n\n  async function mtpSendReqPQ(auth: AuthBasic) {\n    const deferred = auth.deferred\n    log('Send req_pq')(bytesToHex(auth.nonce))\n\n    const request = Serialization({ mtproto: true })\n    const reqBox = request.writer\n    request.storeMethod('req_pq', { nonce: auth.nonce })\n\n\n    let deserializer\n    try {\n      await prepare()\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\n    } catch (err) {\n      console.error(dTime(), 'req_pq error', err.message)\n      deferred.reject(err)\n      throw err\n    }\n\n    try {\n      const response = deserializer.fetchObject('ResPQ', 'ResPQ')\n\n      if (response._ !== 'resPQ') {\n        const error = new Error(`[MT] resPQ response invalid: ${  response._}`)\n        deferred.reject(error)\n        return Promise.reject(error)\n      }\n      if (!bytesCmp(auth.nonce, response.nonce)) {\n        const error = new Error('[MT] resPQ nonce mismatch')\n        deferred.reject(error)\n        return Promise.reject(error)\n      }\n      auth.serverNonce = response.server_nonce\n      auth.pq = response.pq\n      auth.fingerprints = response.server_public_key_fingerprints\n\n      log('Got ResPQ')(bytesToHex(auth.serverNonce), bytesToHex(auth.pq), auth.fingerprints)\n\n      const key = await select(auth.fingerprints)\n\n      if (key)\n        auth.publicKey = key\n      else {\n        const error = new Error('[MT] No public key found')\n        deferred.reject(error)\n        return Promise.reject(error)\n      }\n      log('PQ factorization start')(auth.pq)\n      const [ p, q, it ] = await CryptoWorker.factorize(auth.pq)\n\n      auth.p = p\n      auth.q = q\n      log('PQ factorization done')(it)\n    } catch (error) {\n      log('Worker error')(error, error.stack)\n      deferred.reject(error)\n      throw error\n    }\n\n\n    return auth\n  }\n\n  async function mtpSendReqDhParams(auth: AuthBasic) {\n    const deferred = auth.deferred\n\n    auth.newNonce = new Array(32)\n    random(auth.newNonce)\n\n    const data = Serialization({ mtproto: true })\n    const dataBox = data.writer\n    data.storeObject({\n      _           : 'p_q_inner_data',\n      pq          : auth.pq,\n      p           : auth.p,\n      q           : auth.q,\n      nonce       : auth.nonce,\n      server_nonce: auth.serverNonce,\n      new_nonce   : auth.newNonce\n    }, 'P_Q_inner_data', 'DECRYPTED_DATA')\n\n    const dataWithHash = sha1BytesSync(dataBox.getBuffer()).concat(data.getBytes())\n\n    const request = Serialization({ mtproto: true })\n    const reqBox = request.writer\n    request.storeMethod('req_DH_params', {\n      nonce                 : auth.nonce,\n      server_nonce          : auth.serverNonce,\n      p                     : auth.p,\n      q                     : auth.q,\n      public_key_fingerprint: auth.publicKey.fingerprint,\n      encrypted_data        : rsaEncrypt(auth.publicKey, dataWithHash)\n    })\n\n\n    log('afterReqDH')('Send req_DH_params')\n\n    let deserializer\n    try {\n      deserializer = await sendPlainReq(auth.dcUrl, reqBox.getBuffer())\n    } catch (error) {\n      deferred.reject(error)\n      throw error\n    }\n\n\n    const response = deserializer.fetchObject('Server_DH_Params', 'RESPONSE')\n\n    if (response._ !== 'server_DH_params_fail' && response._ !== 'server_DH_params_ok') {\n      const error = new Error(`[MT] Server_DH_Params response invalid: ${  response._}`)\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.nonce, response.nonce)) {\n      const error = new Error('[MT] Server_DH_Params nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n      const error = new Error('[MT] Server_DH_Params server_nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (response._ === 'server_DH_params_fail') {\n      const newNonceHash = sha1BytesSync(auth.newNonce).slice(-16)\n      if (!bytesCmp(newNonceHash, response.new_nonce_hash)) {\n        const error = new Error('[MT] server_DH_params_fail new_nonce_hash mismatch')\n        deferred.reject(error)\n        throw error\n      }\n      const error = new Error('[MT] server_DH_params_fail')\n      deferred.reject(error)\n      throw error\n    }\n\n    // try {\n    mtpDecryptServerDhDataAnswer(auth, response.encrypted_answer)\n    // } catch (e) {\n    //   deferred.reject(e)\n    //   return false\n    // }\n\n    return auth\n  }\n\n  function mtpDecryptServerDhDataAnswer(auth: AuthBasic, encryptedAnswer) {\n    auth.tmpAesKey = tmpAesKey(auth.serverNonce, auth.newNonce)\n    auth.tmpAesIv = tmpAesIv(auth.serverNonce, auth.newNonce)\n\n    const answerWithHash = aesDecryptSync(\n      encryptedAnswer,\n      auth.tmpAesKey,\n      auth.tmpAesIv)\n\n    const hash = answerWithHash.slice(0, 20)\n    const answerWithPadding = answerWithHash.slice(20)\n    const buffer = bytesToArrayBuffer(answerWithPadding)\n\n    const deserializer = Deserialization(buffer, { mtproto: true })\n    const response = deserializer.fetchObject('Server_DH_inner_data', 'server_dh')\n\n    if (response._ !== 'server_DH_inner_data')\n      throw new Error(`[MT] server_DH_inner_data response invalid`)\n\n    if (!bytesCmp(auth.nonce, response.nonce))\n      throw new Error('[MT] server_DH_inner_data nonce mismatch')\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce))\n      throw new Error('[MT] server_DH_inner_data serverNonce mismatch')\n\n    log('DecryptServerDhDataAnswer')('Done decrypting answer')\n    auth.g = response.g\n    auth.dhPrime = response.dh_prime\n    auth.gA = response.g_a\n    auth.serverTime = response.server_time\n    auth.retry = 0\n\n    mtpVerifyDhParams(auth.g, auth.dhPrime, auth.gA)\n\n    const offset = deserializer.getOffset()\n\n    if (!bytesCmp(hash, sha1BytesSync(answerWithPadding.slice(0, offset))))\n      throw new Error('[MT] server_DH_inner_data SHA1-hash mismatch')\n\n    auth.localTime = tsNow()\n    applyServerTime(auth.serverTime, auth.localTime)\n  }\n\n  const innerLog = log('VerifyDhParams')\n\n  function mtpVerifyDhParams(g, dhPrime, gA) {\n    innerLog('begin')\n    const dhPrimeHex = bytesToHex(dhPrime)\n    if (g !== 3 || dhPrimeHex !== primeHex)\n      // The verified value is from https://core.telegram.org/mtproto/security_guidelines\n      throw new Error('[MT] DH params are not verified: unknown dhPrime')\n    innerLog('dhPrime cmp OK')\n\n    // const gABigInt = new BigInteger(bytesToHex(gA), 16)\n    // const dhPrimeBigInt = new BigInteger(dhPrimeHex, 16)\n\n    const dhPrimeLeemon = str2bigInt(dhPrimeHex, 16, minSize)\n    const gALeemon = str2bigInt(bytesToHex(gA), 16, minSize)\n    const dhDec = dup(dhPrimeLeemon)\n    sub_(dhDec, one)\n    // const dhDecStr = bigInt2str(dhDec, 16)\n    // const comp = dhPrimeBigInt.subtract(BigInteger.ONE).toString(16)\n    // console.log(dhPrimeLeemon, dhDecStr === comp)\n    const case1 = !greater(gALeemon, one)\n      //gABigInt.compareTo(BigInteger.ONE) <= 0\n    const case2 = !greater(dhDec, gALeemon)\n      //gABigInt.compareTo(dhPrimeBigInt.subtract(BigInteger.ONE)) >= 0\n    if (case1)\n      throw new Error('[MT] DH params are not verified: gA <= 1')\n\n    if (case2)\n      throw new Error('[MT] DH params are not verified: gA >= dhPrime - 1')\n    // console.log(dTime(), '1 < gA < dhPrime-1 OK')\n\n\n    // const two = new BigInteger(null)\n    // two.fromInt(2)\n    // const twoPow = two.pow(2048 - 64)\n\n    const case3 = !!greater(leemonTwoPow, gALeemon)\n      //gABigInt.compareTo(twoPow) < 0\n    const dhSubPow = dup(dhPrimeLeemon)\n    sub(dhSubPow, leemonTwoPow)\n    const case4 = !greater(dhSubPow, gALeemon)\n      //gABigInt.compareTo(dhPrimeBigInt.subtract(twoPow)) >= 0\n    // console.log(case3 === gABigInt.compareTo(twoPow) < 0)\n    if (case3)\n      throw new Error('[MT] DH params are not verified: gA < 2^{2048-64}')\n    if (case4)\n      throw new Error('[MT] DH params are not verified: gA > dhPrime - 2^{2048-64}')\n    innerLog('2^{2048-64} < gA < dhPrime-2^{2048-64} OK')\n\n    return true\n  }\n\n  async function mtpSendSetClientDhParams(auth: AuthBasic) {\n    const deferred = auth.deferred\n    const gBytes = bytesFromHex(auth.g.toString(16))\n\n    auth.b = new Array(256)\n    random(auth.b)\n\n    const gB = await CryptoWorker.modPow(gBytes, auth.b, auth.dhPrime)\n    const data = Serialization({ mtproto: true })\n\n    data.storeObject({\n      _           : 'client_DH_inner_data',\n      nonce       : auth.nonce,\n      server_nonce: auth.serverNonce,\n      retry_id    : [0, auth.retry++],\n      g_b         : gB\n    }, 'Client_DH_Inner_Data', 'client_DH')\n\n    const dataWithHash = sha1BytesSync(data.writer.getBuffer()).concat(data.getBytes())\n\n    const encryptedData = aesEncryptSync(dataWithHash, auth.tmpAesKey, auth.tmpAesIv)\n\n    const request = Serialization({ mtproto: true })\n\n    request.storeMethod('set_client_DH_params', {\n      nonce         : auth.nonce,\n      server_nonce  : auth.serverNonce,\n      encrypted_data: encryptedData\n    })\n\n    log('onGb')('Send set_client_DH_params')\n\n    const deserializer = await sendPlainReq(auth.dcUrl, request.writer.getBuffer())\n\n    const response = deserializer.fetchObject('Set_client_DH_params_answer', 'client_dh')\n\n    if (response._ != 'dh_gen_ok' && response._ != 'dh_gen_retry' && response._ != 'dh_gen_fail') {\n      const error = new Error(`[MT] Set_client_DH_params_answer response invalid: ${  response._}`)\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.nonce, response.nonce)) {\n      const error = new Error('[MT] Set_client_DH_params_answer nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n      const error = new Error('[MT] Set_client_DH_params_answer server_nonce mismatch')\n      deferred.reject(error)\n      throw error\n    }\n\n    const authKey = await CryptoWorker.modPow(auth.gA, auth.b, auth.dhPrime)\n\n    const authKeyHash = sha1BytesSync(authKey),\n          authKeyAux = authKeyHash.slice(0, 8),\n          authKeyID = authKeyHash.slice(-8)\n\n    log('Got Set_client_DH_params_answer')(response._)\n    switch (response._) {\n      case 'dh_gen_ok': {\n        const newNonceHash1 = sha1BytesSync(auth.newNonce.concat([1], authKeyAux)).slice(-16)\n\n        if (!bytesCmp(newNonceHash1, response.new_nonce_hash1)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash1 mismatch'))\n          return false\n        }\n\n        const serverSalt = bytesXor(auth.newNonce.slice(0, 8), auth.serverNonce.slice(0, 8))\n        // console.log('Auth successfull!', authKeyID, authKey, serverSalt)\n\n        auth.authKeyID = authKeyID\n        auth.authKey = authKey\n        auth.serverSalt = serverSalt\n\n        deferred.resolve(auth)\n        break\n      }\n      case 'dh_gen_retry': {\n        const newNonceHash2 = sha1BytesSync(auth.newNonce.concat([2], authKeyAux)).slice(-16)\n        if (!bytesCmp(newNonceHash2, response.new_nonce_hash2)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash2 mismatch'))\n          return false\n        }\n\n        return mtpSendSetClientDhParams(auth)\n      }\n      case 'dh_gen_fail': {\n        const newNonceHash3 = sha1BytesSync(auth.newNonce.concat([3], authKeyAux)).slice(-16)\n        if (!bytesCmp(newNonceHash3, response.new_nonce_hash3)) {\n          deferred.reject(new Error('[MT] Set_client_DH_params_answer new_nonce_hash3 mismatch'))\n          return false\n        }\n\n        deferred.reject(new Error('[MT] Set_client_DH_params_answer fail'))\n        return false\n      }\n    }\n  }\n\n  const authChain = (auth: AuthBasic) =>\n    mtpSendReqPQ(auth)\n      .then(mtpSendReqDhParams)\n      .then(mtpSendSetClientDhParams)\n\n  function mtpAuth(dcID: number, cached: Cached, dcUrl: string) {\n    if (cached[dcID])\n      return cached[dcID].promise\n    log('mtpAuth', 'dcID', 'dcUrl')(dcID, dcUrl)\n    const nonce = generateNonce()\n\n    if (!dcUrl)\n      return Promise.reject(\n        new Error(`[MT] No server found for dc ${dcID} url ${dcUrl}`))\n\n    const auth: any = {\n      dcID,\n      dcUrl,\n      nonce,\n      deferred: blueDefer()\n    }\n\n    const onFail = (err: Error) => {\n      log('authChain', 'error')(err)\n      cached[dcID].reject(err)\n      delete cached[dcID]\n      return Promise.reject(err)\n    }\n\n    try {\n      immediate(authChain, auth)\n    } catch (err) {\n      return onFail(err)\n    }\n\n    cached[dcID] = auth.deferred\n\n    cached[dcID].promise.catch(onFail)\n\n    return cached[dcID].promise\n  }\n\n  return mtpAuth\n}\nexport default Auth"]}