{"version":3,"sources":["../../src/service/time-manager.js"],"names":["dTime","log","tsNow","seconds","t","Date","window","tsOffset","Math","floor","lastMessageID","timerOffset","offset","get","generateMessageID","timeTicks","timeSec","timeMSec","random","messageID","applyServerTime","serverTime","localTime","newTimeOffset","changed","abs","set","generateID"],"mappings":";;;;;;;;;;;;kBAkBSA,K;;;;AAlBT;;;;AAEA;;AACA;;AAEA;;;;;;AAEA,IAAMC,MAAM,aAAO,cAAnB;;AAEO,IAAMC,wBAAQC,WAAW;AAC9B,MAAIC,IAAI,CAAC,IAAIC,IAAJ,EAAT;AACA;AACA,MAAI,qBAAJ,EAAaD,KAAKE,OAAOC,QAAP,IAAmB,CAAxB;AACb,SAAOJ,UACHK,KAAKC,KAAL,CAAWL,IAAI,IAAf,CADG,GAEHA,CAFJ;AAGD,CAPM;;AAWP,IAAIM,gBAAgB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA,IAAIC,cAAc,CAAlB;;AAEA,IAAMC,SAAS,kBAAWC,GAAX,EAAf;AACA,IAAID,MAAJ,EAAYD,cAAcC,MAAd;;AAEZ,IAAME,oBAAoB,MAAM;AAC9B,MAAMC,YAAYb,OAAlB;AAAA,MACMc,UAAUR,KAAKC,KAAL,CAAWM,YAAY,IAAvB,IAA+BJ,WAD/C;AAAA,MAEMM,WAAWF,YAAY,IAF7B;AAAA,MAGMG,SAAS,wBAAc,MAAd,CAHf;;AAKA,MAAIC,YAAY,CAACH,OAAD,EAAUC,YAAY,EAAZ,GAAiBC,UAAU,CAA3B,GAA+B,CAAzC,CAAhB;AACA,MAAIR,cAAc,CAAd,IAAmBS,UAAU,CAAV,CAAnB,IACFT,cAAc,CAAd,KAAoBS,UAAU,CAAV,CAApB,IAAoCT,cAAc,CAAd,KAAoBS,UAAU,CAAV,CAD1D,EACwE;AACtEA,gBAAY,CAACT,cAAc,CAAd,CAAD,EAAmBA,cAAc,CAAd,IAAmB,CAAtC,CAAZ;AACD;;AAEDA,kBAAgBS,SAAhB;;AAEA;;AAEA,SAAO,mBAASA,UAAU,CAAV,CAAT,EAAuBA,UAAU,CAAV,CAAvB,CAAP;AACD,CAjBD;;AAmBO,IAAMC,4CAAkB,CAACC,UAAD,EAAaC,SAAb,KAA2B;AACxD,MAAMC,gBAAgBF,aAAab,KAAKC,KAAL,CAAW,CAACa,aAAapB,OAAd,IAAyB,IAApC,CAAnC;AACA,MAAMsB,UAAUhB,KAAKiB,GAAL,CAASd,cAAcY,aAAvB,IAAwC,EAAxD;AACA,oBAAWG,GAAX,CAAeH,aAAf;;AAEAb,kBAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACAC,gBAAcY,aAAd;AACAtB,MAAI,mBAAJ,EAAyBoB,UAAzB,EAAqCC,SAArC,EAAgDC,aAAhD,EAA+DC,OAA/D;;AAEA,SAAOA,OAAP;AACD,CAVM;;QAYuBG,U,GAArBb,iB","file":"time-manager.js","sourcesContent":["import isNode from 'detect-node'\n\nimport { TimeOffset } from '../store'\nimport { nextRandomInt, lshift32 } from '../bin'\n\nimport Logger from '../util/log'\n\nconst log = Logger`time-manager`\n\nexport const tsNow = seconds => {\n  let t = +new Date()\n  //eslint-disable-next-line\n  if (!isNode) t += window.tsOffset || 0\n  return seconds\n    ? Math.floor(t / 1000)\n    : t\n}\n\nexport { dTime } from '../util/dtime'\n\nlet lastMessageID = [0, 0]\nlet timerOffset = 0\n\nconst offset = TimeOffset.get()\nif (offset) timerOffset = offset\n\nconst generateMessageID = () => {\n  const timeTicks = tsNow(),\n        timeSec = Math.floor(timeTicks / 1000) + timerOffset,\n        timeMSec = timeTicks % 1000,\n        random = nextRandomInt(0xFFFF)\n\n  let messageID = [timeSec, timeMSec << 21 | random << 3 | 4]\n  if (lastMessageID[0] > messageID[0] ||\n    lastMessageID[0] == messageID[0] && lastMessageID[1] >= messageID[1]) {\n    messageID = [lastMessageID[0], lastMessageID[1] + 4]\n  }\n\n  lastMessageID = messageID\n\n  // console.log('generated msg id', messageID, timerOffset)\n\n  return lshift32(messageID[0], messageID[1])\n}\n\nexport const applyServerTime = (serverTime, localTime) => {\n  const newTimeOffset = serverTime - Math.floor((localTime || tsNow()) / 1000)\n  const changed = Math.abs(timerOffset - newTimeOffset) > 10\n  TimeOffset.set(newTimeOffset)\n\n  lastMessageID = [0, 0]\n  timerOffset = newTimeOffset\n  log('Apply server time')(serverTime, localTime, newTimeOffset, changed)\n\n  return changed\n}\n\nexport { generateMessageID as generateID }\n"]}