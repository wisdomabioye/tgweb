{"version":3,"sources":["../../src/service/rsa-keys-manger.js"],"names":["KeyManager","Serialization","publisKeysHex","publicKeysParsed","prepareRsaKeys","selectRsaKeyByFingerPrint","prepared","mapPrepare","modulus","exponent","RSAPublicKey","rsaBox","writer","buffer","getBuffer","fingerprintBytes","slice","reverse","map","fingerprints","fingerprintHex","foundKey","fingerprint","prepare","select"],"mappings":";;;;;;;AAEA;;;;AAMA;;AAEA;;;;;;AAIO,IAAMA,kCAAa,CAACC,aAAD,EACxBC,aADwB,EAExBC,gBAFwB,KAEgB;AAAA;AAAA;;AAAA,oBAoBzBC,cApByB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,oBA4BzBC,yBA5ByB;AAAA;AAAA;AAAA;;AACxC,MAAIC,WAAW,KAAf;;AAEA,MAAMC,aAAa,CAAC,EAAEC,OAAF,EAAWC,QAAX,EAAD,KAAsC;AACvD,QAAMC,eAAeT,eAArB;AACA,QAAMU,SAASD,aAAaE,MAA5B;AACA,4BAAWD,MAAX,EAAmB,uBAAaH,OAAb,CAAnB,EAA0C,GAA1C;AACA,4BAAWG,MAAX,EAAmB,uBAAaF,QAAb,CAAnB,EAA2C,GAA3C;;AAEA,QAAMI,SAASF,OAAOG,SAAP,EAAf;;AAEA,QAAMC,mBAAmB,wBAAcF,MAAd,EAAsBG,KAAtB,CAA4B,CAAC,CAA7B,CAAzB;AACAD,qBAAiBE,OAAjB;;AAEAd,qBAAiB,qBAAWY,gBAAX,CAAjB,IAAiD;AAC/CP,aAD+C;AAE/CC;AAF+C,KAAjD;AAID,GAfD;;AAiBA,oBAAgC;AAC9B,QAAIH,QAAJ,EAAc;;AAEd,UAAM,mBAAQY,GAAR,CAAYhB,aAAZ,EAA2BK,UAA3B,CAAN;;AAEAD,eAAW,IAAX;AACD;;AAED,kBAAyCa,YAAzC,EAAiE;AAC/D,UAAMf,gBAAN;;AAEA,QAAIgB,uBAAJ;AAAA,QAAoBC,iBAApB;AACA,yBAA0BF,YAA1B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7BG,WAA6B;;AACtCF,uBAAiB,sBAAYE,WAAZ,CAAjB;AACAD,iBAAWlB,iBAAiBiB,cAAjB,CAAX;AACA,UAAIC,QAAJ,EACE,uBAASC,WAAT,IAAyBD,QAAzB;AACH;AACD,WAAO,KAAP;AACD;;AAED,SAAO;AACLE,aAASnB,cADJ;AAELoB,YAASnB;AAFJ,GAAP;AAID,CA/CM;;kBAiDQL,U","file":"rsa-keys-manger.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n\nimport type { PublicKey } from './main/index.h'\nimport type { Cached } from './api-manager/index.h'\nimport type { SerializationFabric } from '../tl'\n\nimport { writeBytes } from '../tl/writer'\n\nimport { bytesToHex, sha1BytesSync,\n  bytesFromHex, strDecToHex } from '../bin'\n\n\nexport const KeyManager = (Serialization: SerializationFabric,\n  publisKeysHex: PublicKey[],\n  publicKeysParsed: Cached<PublicKey>) => {\n  let prepared = false\n\n  const mapPrepare = ({ modulus, exponent }: PublicKey) => {\n    const RSAPublicKey = Serialization()\n    const rsaBox = RSAPublicKey.writer\n    writeBytes(rsaBox, bytesFromHex(modulus), 'n')\n    writeBytes(rsaBox, bytesFromHex(exponent), 'e')\n\n    const buffer = rsaBox.getBuffer()\n\n    const fingerprintBytes = sha1BytesSync(buffer).slice(-8)\n    fingerprintBytes.reverse()\n\n    publicKeysParsed[bytesToHex(fingerprintBytes)] = {\n      modulus,\n      exponent\n    }\n  }\n\n  async function prepareRsaKeys() {\n    if (prepared) return\n\n    await Promise.map(publisKeysHex, mapPrepare)\n\n    prepared = true\n  }\n\n  async function selectRsaKeyByFingerPrint(fingerprints: string[]) {\n    await prepareRsaKeys()\n\n    let fingerprintHex, foundKey\n    for (const fingerprint of fingerprints) {\n      fingerprintHex = strDecToHex(fingerprint)\n      foundKey = publicKeysParsed[fingerprintHex]\n      if (foundKey)\n        return { fingerprint, ...foundKey }\n    }\n    return false\n  }\n\n  return {\n    prepare: prepareRsaKeys,\n    select : selectRsaKeyByFingerPrint\n  }\n}\n\nexport default KeyManager\n"]}