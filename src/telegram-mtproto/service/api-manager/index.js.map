{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["debug","baseDcID","Ln","length","obj","ApiManager","constructor","config","tls","netFabric","on","emit","cache","uploader","downloader","auth","servers","keysParsed","authPromise","authBegin","currentDc","online","networkSetter","dc","options","authKey","serverSalt","networker","networkFabric","dcID","userAuth","fullUserAuth","storage","set","setUserAuth","server","api","app","publicKeys","schema","mtSchema","apiConfig","serverConfig","chooseServer","TL","keyManager","Serialization","mtpInvokeApi","bind","mtpGetNetworker","Error","akk","ssk","dcUrl","authKeyHex","get","serverSaltHex","createNetworker","error","netError","doAuth","storedBaseDc","baseDc","opts","nearestDc","wrapApiCall","nearest_dc","this_dc","resolve","err","reject","initConnection","isAnyNetworker","promise","method","params","deferred","rejectPromise","data","noErrorBox","req","performRequest","waitTime","deferResolve","apiSavedNet","apiRecall","console","code","type","requestThunk","cfg","getNetworker","netOpts","then","catch","e","ctx","Object","keys","log","stack"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport Promise from 'bluebird'\n// import UpdatesManager from '../updates'\n\nimport propEq from 'ramda/src/propEq'\nimport has from 'ramda/src/has'\n\nimport Logger from '../../util/log'\nconst debug = Logger`api-manager`\n\nimport Auth from '../authorizer'\nimport type { Args } from '../authorizer'\n\nimport blueDefer from '../../util/defer'\nimport { dTime } from '../time-manager'\nimport { chooseServer } from '../dc-configurator'\n\nimport KeyManager from '../rsa-keys-manger'\nimport { AuthKeyError } from '../../error'\n\nimport { bytesFromHex, bytesToHex } from '../../bin'\n\nimport type { TLFabric } from '../../tl'\nimport type { TLSchema } from '../../tl/index.h'\nimport { switchErrors } from './error-cases'\nimport { delayedCall } from '../../util/smart-timeout'\n\nimport Request from './request'\n\nimport type { Bytes, LeftOptions, Cache, RequestOptions } from './index.h'\nimport type { PublicKey, ApiConfig, StrictConfig, Emit, On } from '../main/index.h'\n\nimport type { AsyncStorage } from '../../plugins'\n\nimport type { Networker } from '../networker'\n\nconst baseDcID = 2\n\nconst Ln = (length, obj) => obj && propEq('length', length, obj)\n\n\n\nexport class ApiManager {\n  cache: Cache = {\n    uploader  : {},\n    downloader: {},\n    auth      : {},\n    servers   : {},\n    keysParsed: {}\n  }\n  apiConfig: ApiConfig\n  publicKeys: PublicKey[]\n  storage: AsyncStorage\n  TL: TLFabric\n  serverConfig: {}\n  schema: TLSchema\n  mtSchema: TLSchema\n  keyManager: Args\n  networkFabric: any\n  updatesManager: any\n  auth: any\n  on: On\n  emit: Emit\n  authPromise = blueDefer()\n  authBegin = false\n  chooseServer: (dcID: number, upload?: boolean) => {}\n  currentDc: number = 2\n  online: boolean = false\n  constructor(config: StrictConfig, tls: TLFabric, netFabric: Function, { on, emit }: { on: On, emit: Emit }) {\n    const {\n      server,\n      api,\n      app: {\n        storage,\n        publicKeys\n      },\n      schema,\n      mtSchema\n    } = config\n    this.apiConfig = api\n    this.publicKeys = publicKeys\n    this.storage = storage\n    this.serverConfig = server\n    this.schema = schema\n    this.mtSchema = mtSchema\n    this.chooseServer = chooseServer(this.cache.servers, server)\n    this.on = on\n    this.emit = emit\n    this.TL = tls\n    this.keyManager = KeyManager(this.TL.Serialization, publicKeys, this.cache.keysParsed)\n    this.auth = Auth(this.TL, this.keyManager)\n    this.networkFabric = netFabric(this.chooseServer)\n\n    //$FlowIssue\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\n    //$FlowIssue\n    this.mtpGetNetworker = this.mtpGetNetworker.bind(this)\n\n    // this.updatesManager = UpdatesManager(apiManager, this.TL)\n    // apiManager.updates = this.updatesManager\n  }\n  networkSetter = (dc: number, options: LeftOptions) =>\n    (authKey: Bytes, serverSalt: Bytes): Networker => {\n      const networker = this.networkFabric(dc, authKey, serverSalt, options)\n      this.cache.downloader[dc] = networker\n      return networker\n    }\n  async mtpGetNetworker(dcID: number, options: LeftOptions = {}) {\n    // const isUpload = options.fileUpload || options.fileDownload\n    // const cache = isUpload\n    //   ? this.cache.uploader\n    //   : this.cache.downloader\n\n    const cache = this.cache.downloader\n    if (!dcID) throw new Error('get Networker without dcID')\n\n    if (has(dcID, cache)) return cache[dcID]\n\n    const akk = `dc${  dcID  }_auth_key`\n    const ssk = `dc${  dcID  }_server_salt`\n\n    const dcUrl = this.chooseServer(dcID, false)\n\n    const networkSetter = this.networkSetter(dcID, options)\n\n\n    if (cache[dcID]) return cache[dcID]\n\n    const authKeyHex = await this.storage.get(akk)\n    let serverSaltHex = await this.storage.get(ssk)\n\n    if (Ln(512, authKeyHex)) {\n      if (!serverSaltHex || serverSaltHex.length !== 16)\n        serverSaltHex = 'AAAAAAAAAAAAAAAA'\n      const authKey = bytesFromHex(authKeyHex)\n      const serverSalt = bytesFromHex(serverSaltHex)\n\n      return networkSetter(authKey, serverSalt)\n    }\n\n    if (!options.createNetworker)\n      throw new AuthKeyError()\n\n    let auth\n    try {\n      auth = await this.auth(dcID, this.cache.auth, dcUrl)\n    } catch (error) {\n      return netError(error)\n    }\n\n    const { authKey, serverSalt } = auth\n\n    await this.storage.set(akk, bytesToHex(authKey))\n    await this.storage.set(ssk, bytesToHex(serverSalt))\n\n    return networkSetter(authKey, serverSalt)\n  }\n  async doAuth() {\n    this.authBegin = true\n    try {\n      const storedBaseDc = await this.storage.get('dc')\n      const baseDc = storedBaseDc || baseDcID\n      const opts = {\n        dcID           : baseDc,\n        createNetworker: true\n      }\n      const networker = await this.mtpGetNetworker(baseDc, opts)\n      const nearestDc = await networker.wrapApiCall(\n        'help.getNearestDc', {}, opts)\n      const { nearest_dc, this_dc } = nearestDc\n      if (storedBaseDc == null) {\n        await this.storage.set('dc', nearest_dc)\n        if (nearest_dc !== this_dc) await this.mtpGetNetworker(nearest_dc, {\n          dcID           : nearest_dc,\n          createNetworker: true\n        })\n\n      }\n      debug(`nearest Dc`)(nearestDc)\n      this.authPromise.resolve()\n    } catch (err) {\n      this.authPromise.reject(err)\n    }\n  }\n  async initConnection() {\n    if (!isAnyNetworker(this)) {\n      if (!this.authBegin)\n        this.doAuth()\n      await this.authPromise.promise\n    }\n  }\n  async mtpInvokeApi(method: string, params: Object, options: LeftOptions = {}) {\n    const deferred = blueDefer()\n    const rejectPromise = (error: any) => {\n      let err\n      if (error instanceof Error)\n        err = error\n      else {\n        err = new Error()\n        err.data = error\n      }\n      // if (!error)\n      //   err = { type: 'ERROR_EMPTY', input: '' }\n      // else if (!is(Object, error))\n      //   err = { message: error }\n      // else err = error\n      deferred.reject(err)\n\n      if (!options.noErrorBox) {\n        //TODO weird code. `error` changed after `.reject`?\n\n        /*err.input = method\n\n        err.stack =\n          stack ||\n          hasPath(['originalError', 'stack'], error) ||\n          error.stack ||\n          (new Error()).stack*/\n        this.emit('error.invoke', error)\n      }\n    }\n    try {\n      await this.initConnection()\n\n      const requestThunk = waitTime => delayedCall(req.performRequest, +waitTime * 1e3)\n\n      const dcID = options.dcID\n        ? options.dcID\n        : await this.storage.get('dc')\n\n      const networker = await this.mtpGetNetworker(dcID, options)\n\n      const cfg: RequestOptions = {\n        networker,\n        dc          : dcID,\n        storage     : this.storage,\n        getNetworker: this.mtpGetNetworker,\n        netOpts     : options\n      }\n      const req = new Request(cfg, method, params)\n\n\n      req.performRequest()\n        .then(\n          deferred.resolve,\n          error => {\n            const deferResolve = deferred.resolve\n            const apiSavedNet = () => networker\n            const apiRecall = networker => {\n              req.config.networker = networker\n              return req.performRequest()\n            }\n            console.error(dTime(), 'Error', error.code, error.type, baseDcID, dcID)\n\n            return switchErrors(error, options, dcID, baseDcID)(\n              error, options, dcID, this.emit, rejectPromise, requestThunk,\n              apiSavedNet, apiRecall, deferResolve, this.mtpInvokeApi,\n              this.storage)\n          })\n        .catch(rejectPromise)\n    } catch (e) {\n      deferred.reject(e)\n    }\n    return deferred.promise\n  }\n\n  setUserAuth = async (dcID: number, userAuth: any) => {\n    const fullUserAuth = { dcID, ...userAuth }\n    await this.storage.set('dc', dcID)\n    await this.storage.set('user_auth', fullUserAuth)\n    this.emit('auth.dc', { dc: dcID, auth: userAuth })\n  }\n}\n\nconst isAnyNetworker = (ctx: ApiManager) => Object.keys(ctx.cache.downloader).length > 0\n\nconst netError = error => {\n  console.log('Get networker error', error, error.stack)\n  return Promise.reject(error)\n}\n"]}