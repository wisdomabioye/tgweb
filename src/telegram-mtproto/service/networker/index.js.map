{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["getMsgKeyIv","log","updatesProcessor","iii","akStopped","storeIntString","writer","value","field","Error","NetworkerThread","constructor","appConfig","chooseServer","Serialization","Deserialization","storage","emit","dc","authKey","serverSalt","options","dcID","longPoll","authKeyUint8","authKeyBuffer","authKeyID","slice","wrapApiCall","bind","upload","fileUpload","fileDownload","updateSession","setInterval","checkLongPoll","seqNo","prevSessionID","sessionID","Array","updateSentMessage","sentMessageID","state","hasSent","sentMessage","getSent","newInner","inner","innerID","innerSentMessage","push","msg_id","deleteSent","newId","seq_no","generateSeqNo","notContentRelated","container","addSent","wrapMtpCall","method","params","serializer","mtproto","storeMethod","message","getBytes","pushMessage","deferred","promise","wrapMtpMessage","object","storeObject","verifyInnerMessages","msg_ids","serialBox","connectionInited","mapper","afterMessageID","resultType","isAPI","copyOptions","setPending","noShedule","sheduleRequest","Object","messageID","pushResend","delay","msg","toggleOffline","enabled","offline","undefined","cancel","nextReqPromise","nextReq","checkConnectionPeriod","checkConnectionPromise","checkConnection","parseInt","Math","min","onOnlineCb","pendingTime","Infinity","then","performResend","hasResends","resendMsgIDs","getResends","resendOpts","_","lastResendReq","req_msg_id","resend_msg_ids","requestPerformer","noResponseMsgs","result","sendEncryptedRequest","response","parseResponse","data","processMessage","msgID","resolve","max","sqrt","error","console","deletePending","reject","responseBuffer","deserializerRaw","fetchIntBytes","msgKey","encryptedData","fetchRawBytes","byteLength","getOffset","aesKey","aesIv","dataWithPadding","aesDecrypt","deserializer","typeBuffer","isInvalidSession","warn","fetchInt","offset","totalLength","messageBodyLength","messageBody","paddingLength","hashData","subarray","dataHash","sha1Hash","buffer","deserializerOptions","getDeserializeOpts","getMsgById","deserializerData","fetchObject","applyServerSalt","newServerSalt","set","performSheduledRequest","ackMessage","pendingAcks","reqResendMessage","addResend","cleanupSent","notEmpty","sentIterator","complete","hasPending","processError","rawError","matches","error_message","match","error_code","RawError","code","type","description","originalError","msgidInt","toString","substr","messages","bad_msg_id","bad_msg_seqno","new_server_salt","badMessage","lastServerMessages","indexOf","length","shift","body","processMessageAck","first_msg_id","server_salt","baseDcID","get","updateCond","forEach","answer_msg_id","spliceCond","badMsgID","deleteResent","matched","newDcID","checkLongPollCond","checkLongPollAfterDcCond","isClean","baseDc","sleepAfter","sendLongPool","event","pingID","ping_id","pingMessage","succ","timeout","err","ackMsgIDs","ack","messagesByteLen","lengthOverflow","singlesCount","pendingIterator","messageByteLength","size","cond1","cond2","singleInRequest","max_delay","wait_after","max_wait","writePollTime","startMaxLength","contBox","innerMessages","i","noResponse","dataBox","url","bytes","getBuffer","bytesHash","Uint8Array","encryptedBytes","aesEncrypt","request","requestBox","requestData","getArray","responseType","post","acked","obj","NetworkerFabric","msgGetter","override","mt_message","seqno","e","stack","mt_rpc_result","startAll","stopAll","setUpdatesProcessor","callback","Set","isOut","x","sha1aText","sha1bText","sha1cText","sha1dText","promises","results","all","sha1a","sha1b","sha1c","sha1d"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Promise from 'bluebird'\r\n\r\nimport is from 'ramda/src/is'\r\nimport contains from 'ramda/src/contains'\r\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\r\n\r\nimport CryptoWorker from '../../crypto'\r\nimport { dTime, tsNow, generateID, applyServerTime } from '../time-manager'\r\nimport random from '../secure-random'\r\nimport { NetMessage, NetContainer } from './net-message'\r\nimport State from './state'\r\nimport smartTimeout, { immediate } from '../../util/smart-timeout'\r\nimport { httpClient } from '../../http'\r\n\r\nimport { ErrorBadRequest, ErrorBadResponse } from '../../error'\r\n\r\nimport Logger from '../../util/log'\r\n\r\nconst log = Logger`networker`\r\n\r\nimport {\r\n  convertToUint8Array,\r\n  convertToArrayBuffer,\r\n  sha1BytesSync,\r\n  bytesCmp,\r\n  bytesToHex,\r\n  bytesFromArrayBuffer,\r\n  bytesToArrayBuffer,\r\n  longToBytes,\r\n  uintToInt,\r\n  rshift32\r\n} from '../../bin'\r\n\r\nimport type { AsyncStorage } from '../../plugins/index.h'\r\nimport type { TLFabric, SerializationFabric, DeserializationFabric } from '../../tl'\r\nimport { TypeWriter } from '../../tl'\r\nimport { readLong, readInt } from '../../tl/reader'\r\nimport { writeInt, writeIntBytes, writeBytes, writeLong } from '../../tl/writer'\r\nimport type { Emit } from '../main/index.h'\r\n\r\nimport LongPoll from '../../plugins/long-poll'\r\nimport { getRandomId } from '../../plugins/math-help'\r\n\r\nlet updatesProcessor\r\nlet iii = 0\r\nlet akStopped = false\r\n\r\n//eslint-disable-next-line\r\n// const xhrSendBuffer = !isNode && !('ArrayBufferView' in window)\r\n\r\ntype NetOptions = {\r\n  fileUpload?: boolean,\r\n  fileDownload?: boolean,\r\n  notContentRelated?: boolean,\r\n  afterMessageID?: string,\r\n  resultType?: any\r\n}\r\ntype Bytes = number[]\r\n\r\ntype ContextConfig = {\r\n  Serialization: SerializationFabric,\r\n  Deserialization: DeserializationFabric,\r\n  emit: Emit,\r\n  storage: AsyncStorage\r\n}\r\n\r\nconst storeIntString = (writer: TypeWriter) => (value: number | string, field: string) => {\r\n  switch (typeof value) {\r\n    case 'string': return writeBytes(writer, value, `${field}:string`)\r\n    case 'number': return writeInt(writer, value, field)\r\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\r\n  }\r\n}\r\n\r\nexport class NetworkerThread {\r\n  dcID: number\r\n  authKey: string\r\n  authKeyUint8: Uint8Array\r\n  authKeyBuffer: ArrayBuffer\r\n  serverSalt: string\r\n  iii: number\r\n  authKeyID: Bytes\r\n  upload: boolean\r\n  pendingAcks: number[] = []\r\n  seqNo: number\r\n  sessionID: Bytes\r\n  prevSessionID: Bytes\r\n  state = new State\r\n  connectionInited = false\r\n  checkConnectionPeriod = 0\r\n  checkConnectionPromise: Promise<*>\r\n  Serialization: SerializationFabric\r\n  Deserialization: DeserializationFabric\r\n  emit: Emit\r\n  lastServerMessages: string[] = []\r\n  offline: boolean\r\n  storage: AsyncStorage\r\n  longPoll: LongPoll\r\n  onOnlineCb: *\r\n  constructor({\r\n      appConfig,\r\n      chooseServer,\r\n      Serialization,\r\n      Deserialization,\r\n      storage,\r\n      emit\r\n    }: ContextConfig,\r\n              dc: number,\r\n              authKey: string,\r\n              serverSalt: string,\r\n              options: NetOptions) {\r\n    this.appConfig = appConfig\r\n    this.chooseServer = chooseServer\r\n    this.Serialization = Serialization\r\n    this.Deserialization = Deserialization\r\n    this.storage = storage\r\n    this.emit = emit\r\n    this.dcID = dc\r\n    this.iii = iii++\r\n\r\n    this.longPoll = new LongPoll(this)\r\n\r\n    this.authKey = authKey\r\n    this.authKeyUint8 = convertToUint8Array(authKey)\r\n    this.authKeyBuffer = convertToArrayBuffer(authKey)\r\n    this.authKeyID = sha1BytesSync(authKey).slice(-8)\r\n\r\n    //$FlowIssue\r\n    this.wrapApiCall = this.wrapApiCall.bind(this)\r\n\r\n    // this.checkLongPollCond = this.checkLongPollCond.bind(this)\r\n    this.serverSalt = serverSalt\r\n\r\n    this.upload = options.fileUpload || options.fileDownload || false\r\n\r\n    this.updateSession()\r\n\r\n    setInterval(this.checkLongPoll, 10000) //NOTE make configurable interval\r\n    this.checkLongPoll()\r\n  }\r\n  updateSession() {\r\n    this.seqNo = 0\r\n    this.prevSessionID = this.sessionID\r\n    this.sessionID = new Array(8)\r\n    random(this.sessionID)\r\n  }\r\n\r\n  updateSentMessage(sentMessageID: string) {\r\n    if (!this.state.hasSent(sentMessageID)) return false\r\n    const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n    if (sentMessage instanceof NetContainer) {\r\n      const newInner = []\r\n      for (const innerID of sentMessage.inner) {\r\n        const innerSentMessage = this.updateSentMessage(innerID)\r\n        if (innerSentMessage)\r\n          newInner.push(innerSentMessage.msg_id)\r\n      }\r\n      sentMessage.inner = newInner\r\n    }\r\n    this.state.deleteSent(sentMessage)\r\n    const newId = generateID()\r\n    sentMessage.msg_id = newId\r\n    sentMessage.seq_no = this.generateSeqNo(\r\n      sentMessage.notContentRelated ||\r\n      sentMessage.container\r\n    )\r\n    this.state.addSent(sentMessage)\r\n\r\n    return sentMessage\r\n  }\r\n\r\n  generateSeqNo(notContentRelated?: boolean) {\r\n    let seqNo = this.seqNo * 2\r\n\r\n    if (!notContentRelated) {\r\n      seqNo++\r\n      this.seqNo++\r\n    }\r\n\r\n    return seqNo\r\n  }\r\n\r\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = this.Serialization({ mtproto: true })\r\n\r\n    serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    log(`MT call`)(method, params, message.msg_id, seqNo)\r\n\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\r\n\r\n    const serializer = this.Serialization({ mtproto: true })\r\n    serializer.storeObject(object, 'Object')\r\n\r\n    const seqNo = this.generateSeqNo(options.notContentRelated)\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    log(`MT message`)(message.msg_id, object, seqNo)\r\n    verifyInnerMessages(object.msg_ids)\r\n    this.pushMessage(message, options)\r\n    return message\r\n  }\r\n\r\n  wrapApiCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = this.Serialization(options)\r\n    const serialBox = serializer.writer\r\n    if (!this.connectionInited) {\r\n      // serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\r\n      // serializer.storeInt(Config.Schema.API.layer, 'layer')\r\n      // serializer.storeInt(0x69796de9, 'initConnection')\r\n      // serializer.storeInt(Config.App.id, 'api_id')\r\n      // serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\r\n      // serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\r\n      // serializer.storeString(Config.App.version, 'app_version')\r\n      // serializer.storeString(navigator.language || 'en', 'lang_code')\r\n      const mapper = storeIntString(serialBox)\r\n      mapObjIndexed(mapper, this.appConfig)\r\n    }\r\n\r\n    if (options.afterMessageID) {\r\n      writeInt(serialBox, 0xcb9f372d, 'invokeAfterMsg')\r\n      writeLong(serialBox, options.afterMessageID, 'msg_id')\r\n    }\r\n\r\n    options.resultType = serializer.storeMethod(method, params)\r\n\r\n    const seqNo = this.generateSeqNo()\r\n    const message = new NetMessage(\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    message.isAPI = true\r\n\r\n    log(`Api call`)(method, params, message.msg_id, seqNo, options)\r\n\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  checkLongPollCond = () =>\r\n    this.longPoll.pendingTime > tsNow() ||\r\n    !!this.offline ||\r\n    akStopped\r\n\r\n  checkLongPollAfterDcCond = (isClean: boolean, baseDc: number) => isClean && (\r\n    this.dcID !== baseDc ||\r\n    this.upload ||\r\n    this.sleepAfter &&\r\n    this.sleepAfter < tsNow()\r\n  )\r\n\r\n  checkLongPoll = async () => {\r\n    const isClean = this.cleanupSent()\r\n    if (this.checkLongPollCond())\r\n      return false\r\n\r\n    const baseDc: number = await this.storage.get('dc')\r\n    if (this.checkLongPollAfterDcCond(isClean, baseDc))\r\n    // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\r\n      return\r\n    return this.longPoll.sendLongPool()\r\n  }\r\n\r\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\r\n    message.copyOptions(options)\r\n    this.state.addSent(message)\r\n    this.state.setPending(message.msg_id)\r\n\r\n    if (!options.noShedule)\r\n      this.sheduleRequest()\r\n    if (is(Object, options))\r\n      options.messageID = message.msg_id\r\n  }\r\n\r\n  pushResend(messageID: string, delay?: number) {\r\n    const value = delay\r\n      ? tsNow() + delay\r\n      : 0\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage instanceof NetContainer)\r\n      for (const msg of sentMessage.inner)\r\n        this.state.setPending(msg, value)\r\n    else\r\n      this.state.setPending(messageID, value)\r\n\r\n    this.sheduleRequest(delay)\r\n  }\r\n\r\n\r\n\r\n  checkConnection = async (event: * ) => {\r\n    log(`Check connection`)(event)\r\n    smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    const serializer = this.Serialization({ mtproto: true })\r\n    const pingID = getRandomId()\r\n\r\n    serializer.storeMethod('ping', { ping_id: pingID })\r\n\r\n    const pingMessage = new NetMessage(\r\n      this.generateSeqNo(true),\r\n      serializer.getBytes()\r\n    )\r\n\r\n    let succ = false\r\n\r\n    try {\r\n      const result = await this.sendEncryptedRequest(pingMessage, { timeout: 15000 })\r\n      succ = true\r\n      this.toggleOffline(false)\r\n      log(`checkConnection, result`)(result)\r\n    } catch (err) {\r\n      log(`encrypted request fail`)(err)\r\n    }\r\n    if (succ) return\r\n    const delay = this.checkConnectionPeriod * 1e3\r\n    log(`checkConnection, Delay`)(delay)\r\n    this.checkConnectionPromise = smartTimeout(\r\n      this.checkConnection, delay)\r\n    this.checkConnectionPeriod = Math.min(60, this.checkConnectionPeriod * 1.5)\r\n  }\r\n\r\n  toggleOffline(enabled: boolean) {\r\n    // console.log('toggle ', enabled, this.dcID, this.iii)\r\n    if (!this.offline !== undefined && this.offline == enabled)\r\n      return false\r\n\r\n    this.offline = enabled\r\n\r\n    if (this.offline) {\r\n      smartTimeout.cancel(this.nextReqPromise)\r\n      delete this.nextReq\r\n\r\n      if (this.checkConnectionPeriod < 1.5)\r\n        this.checkConnectionPeriod = 0\r\n\r\n\r\n      this.checkConnectionPromise = smartTimeout(\r\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\r\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\r\n\r\n      this.onOnlineCb = this.checkConnection\r\n      this.emit('net.offline', this.onOnlineCb)\r\n    } else {\r\n      this.longPoll.pendingTime = -Infinity\r\n        //NOTE check long state was here\r\n      this.checkLongPoll().then(() => {})\r\n      this.sheduleRequest()\r\n\r\n      if (this.onOnlineCb)\r\n        this.emit('net.online', this.onOnlineCb)\r\n\r\n      smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    }\r\n  }\r\n  performResend() {\r\n    if (this.state.hasResends()) {\r\n      const resendMsgIDs = [...this.state.getResends()]\r\n      const resendOpts = { noShedule: true, notContentRelated: true }\r\n        // console.log('resendReq messages', resendMsgIDs)\r\n      const msg = this.wrapMtpMessage({\r\n        _      : 'msg_resend_req',\r\n        msg_ids: resendMsgIDs\r\n      }, resendOpts)\r\n      this.lastResendReq = { req_msg_id: msg.msg_id, resend_msg_ids: resendMsgIDs }\r\n    }\r\n  }\r\n  performSheduledRequest = () => { //TODO extract huge method\r\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\r\n    if (this.offline || akStopped) {\r\n      log(`Cancel sheduled`)(``)\r\n      return Promise.resolve(false)\r\n    }\r\n    delete this.nextReq\r\n    if (this.pendingAcks.length) {\r\n      const ackMsgIDs = []\r\n      for (const ack of this.pendingAcks)\r\n        ackMsgIDs.push(ack)\r\n      log('acking messages')(ackMsgIDs)\r\n      this.wrapMtpMessage({\r\n          _      : 'msgs_ack',\r\n          msg_ids: ackMsgIDs\r\n      }, {\r\n          notContentRelated: true,\r\n          noShedule        : true\r\n      })\r\n        // const res = await msg.deferred.promise\r\n        // log(`AWAITED`, `ack`)(res)\r\n    }\r\n\r\n    this.performResend()\r\n\r\n    const messages = []\r\n    let message: NetMessage\r\n    let messagesByteLen = 0\r\n      // const currentTime = tsNow()\r\n    let lengthOverflow = false\r\n    let singlesCount = 0\r\n\r\n    for (const [messageID, value] of this.state.pendingIterator()) {\r\n      if (value && value < tsNow()) continue\r\n      this.state.deletePending(messageID)\r\n      if (!this.state.hasSent(messageID)) continue\r\n      message = this.state.getSent(messageID)\r\n      const messageByteLength = message.size() + 32\r\n      const cond1 = !message.notContentRelated && lengthOverflow\r\n      const cond2 = !message.notContentRelated &&\r\n        messagesByteLen + messageByteLength > 655360 // 640 Kb\r\n      if (cond1) continue\r\n      if (cond2) {\r\n        lengthOverflow = true\r\n        continue\r\n      }\r\n      if (message.singleInRequest) {\r\n        singlesCount++\r\n        if (singlesCount > 1) continue\r\n      }\r\n      messages.push(message)\r\n      messagesByteLen += messageByteLength\r\n    }\r\n\r\n    if (!message) return Promise.resolve(false)\r\n\r\n    if (message.isAPI && !message.longPoll) {\r\n      const serializer = this.Serialization({ mtproto: true })\r\n      serializer.storeMethod('http_wait', {\r\n        max_delay : 500,\r\n        wait_after: 150,\r\n        max_wait  : 3000\r\n      })\r\n      messages.push(new NetMessage(\r\n        this.generateSeqNo(),\r\n        serializer.getBytes()\r\n      ))\r\n      this.longPoll.writePollTime()\r\n    }\r\n\r\n    if (!messages.length) {\r\n      // console.log('no sheduled messages')\r\n      return Promise.resolve()\r\n    }\r\n\r\n    const noResponseMsgs = []\r\n\r\n    if (messages.length > 1) {\r\n      const container = this.Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 })\r\n      const contBox = container.writer\r\n      writeInt(contBox, 0x73f1f8dc, 'CONTAINER[id]')\r\n      writeInt(contBox, messages.length, 'CONTAINER[count]')\r\n      const innerMessages = []\r\n      let i = 0\r\n      for (const msg of messages) {\r\n        writeLong(contBox, msg.msg_id, `CONTAINER[${i}][msg_id]`)\r\n        innerMessages.push(msg.msg_id)\r\n        writeInt(contBox, msg.seq_no, `CONTAINER[${i}][seq_no]`)\r\n        writeInt(contBox, msg.body.length, `CONTAINER[${i}][bytes]`)\r\n        writeIntBytes(contBox, msg.body, false, `CONTAINER[${i}][body]`)\r\n        if (msg.noResponse)\r\n          noResponseMsgs.push(msg.msg_id)\r\n        i++\r\n      }\r\n\r\n      message = new NetContainer(\r\n        this.generateSeqNo(true),\r\n        container.getBytes(true),\r\n        innerMessages)\r\n\r\n      log(`Container`)(innerMessages,\r\n                       noResponseMsgs,\r\n                       message.msg_id,\r\n                       message.seq_no)\r\n    } else {\r\n      if (message.noResponse)\r\n        noResponseMsgs.push(message.msg_id)\r\n    }\r\n\r\n    this.state.addSent(message)\r\n\r\n    this.pendingAcks = [] //TODO WTF,he just clear and forget them at all?!?\r\n    if (lengthOverflow || singlesCount > 1) this.sheduleRequest()\r\n\r\n    return this.requestPerformer(message, noResponseMsgs)\r\n  }\r\n  async requestPerformer(message: NetMessage, noResponseMsgs: string[]) {\r\n    try {\r\n      const result = await this.sendEncryptedRequest(message)\r\n      this.toggleOffline(false)\r\n      const response = await this.parseResponse(result.data)\r\n      log(`Server response`)(this.dcID, response)\r\n\r\n      await this.processMessage(\r\n        response.response,\r\n        response.messageID,\r\n        response.sessionID)\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          msg.deferred.resolve()\r\n        }\r\n\r\n      this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\r\n\r\n      //return\r\n      this.checkLongPoll() //TODO Bluebird warning here\r\n    } catch (error) {\r\n      console.log('Encrypted request failed', error)\r\n\r\n      if (message instanceof NetContainer) {\r\n        for (const msgID of message.inner)\r\n          this.state.setPending(msgID)\r\n        this.state.deleteSent(message)\r\n      } else\r\n        this.state.setPending(message.msg_id)\r\n\r\n\r\n      for (const msgID of noResponseMsgs)\r\n        if (this.state.hasSent(msgID)) {\r\n          const msg = this.state.getSent(msgID)\r\n          this.state.deleteSent(msg)\r\n          this.state.deletePending(msgID)\r\n          msg.deferred.reject()\r\n        }\r\n\r\n      this.toggleOffline(true)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  sendEncryptedRequest = async (message: NetMessage, options = {}) => {\r\n    // console.log(dTime(), 'Send encrypted'/*, message*/)\r\n    // console.trace()\r\n    const data = this.Serialization({ startMaxLength: message.body.length + 64 })\r\n    const dataBox = data.writer\r\n    writeIntBytes(dataBox, this.serverSalt, 64, 'salt')\r\n    writeIntBytes(dataBox, this.sessionID, 64, 'session_id')\r\n    writeLong(dataBox, message.msg_id, 'message_id')\r\n    writeInt(dataBox, message.seq_no, 'seq_no')\r\n\r\n    writeInt(dataBox, message.body.length, 'message_data_length')\r\n    writeIntBytes(dataBox, message.body, false, 'message_data')\r\n\r\n    const url = this.chooseServer(this.dcID, this.upload)\r\n\r\n    const bytes = dataBox.getBuffer()\r\n\r\n    const bytesHash = await CryptoWorker.sha1Hash(bytes)\r\n    const msgKey = new Uint8Array(bytesHash).subarray(4, 20)\r\n    const [aesKey, aesIv] = await getMsgKeyIv(this.authKeyUint8, msgKey, true)\r\n    const encryptedBytes = await CryptoWorker.aesEncrypt(bytes, aesKey, aesIv)\r\n\r\n    const request = this.Serialization({ startMaxLength: encryptedBytes.byteLength + 256 })\r\n    const requestBox = request.writer\r\n    writeIntBytes(requestBox, this.authKeyID, 64, 'auth_key_id')\r\n    writeIntBytes(requestBox, msgKey, 128, 'msg_key')\r\n    writeIntBytes(requestBox, encryptedBytes, false, 'encrypted_data')\r\n\r\n    const requestData = requestBox.getArray()\r\n\r\n    options = { responseType: 'arraybuffer', ...options }\r\n\r\n    try {\r\n      const result = await httpClient.post(url, requestData, options)\r\n      return !result.data || !result.data.byteLength\r\n        ? Promise.reject(new ErrorBadResponse(url, result))\r\n        : result\r\n    } catch (error) {\r\n      return Promise.reject(new ErrorBadRequest(url, error))\r\n    }\r\n  }\r\n\r\n  getMsgById = ({ req_msg_id }) => this.state.getSent(req_msg_id)\r\n\r\n  async parseResponse(responseBuffer: Uint8Array) {\r\n    // console.log(dTime(), 'Start parsing response')\r\n    // const self = this\r\n\r\n    const deserializerRaw = this.Deserialization(responseBuffer)\r\n\r\n    const authKeyID = deserializerRaw.fetchIntBytes(64, 'auth_key_id')\r\n    if (!bytesCmp(authKeyID, this.authKeyID)) {\r\n      throw new Error(`[MT] Invalid server auth_key_id: ${  bytesToHex(authKeyID)}`)\r\n    }\r\n    const msgKey = deserializerRaw.fetchIntBytes(128, 'msg_key')\r\n    const encryptedData = deserializerRaw.fetchRawBytes(\r\n      responseBuffer.byteLength - deserializerRaw.getOffset(),\r\n      'encrypted_data')\r\n\r\n\r\n    const [aesKey, aesIv] = await getMsgKeyIv(this.authKeyUint8, msgKey, false)\r\n    const dataWithPadding = await CryptoWorker.aesDecrypt(encryptedData, aesKey, aesIv)\r\n      // console.log(dTime(), 'after decrypt')\r\n    const deserializer = this.Deserialization(dataWithPadding, { mtproto: true })\r\n\r\n    deserializer.fetchIntBytes(64, 'salt')\r\n    const sessionID = deserializer.fetchIntBytes(64, 'session_id')\r\n    const messageID = readLong(deserializer.typeBuffer, 'message_id')\r\n\r\n    const isInvalidSession = !bytesCmp(sessionID, this.sessionID) && (!this.prevSessionID ||\r\n      //eslint-disable-next-line\r\n      !bytesCmp(sessionID, this.prevSessionID));\r\n    if (isInvalidSession) {\r\n      console.warn('Sessions', sessionID, this.sessionID, this.prevSessionID)\r\n      throw new Error(`[MT] Invalid server session_id: ${ bytesToHex(sessionID) }`)\r\n    }\r\n\r\n    const seqNo = deserializer.fetchInt('seq_no')\r\n\r\n    let offset = deserializer.getOffset()\r\n    const totalLength = dataWithPadding.byteLength\r\n\r\n    const messageBodyLength = deserializer.fetchInt('message_data[length]')\r\n    if (messageBodyLength % 4 ||\r\n      messageBodyLength > totalLength - offset) {\r\n      throw new Error(`[MT] Invalid body length: ${  messageBodyLength}`)\r\n    }\r\n    const messageBody = deserializer.fetchRawBytes(messageBodyLength, 'message_data')\r\n\r\n    offset = deserializer.getOffset()\r\n    const paddingLength = totalLength - offset\r\n    if (paddingLength < 0 || paddingLength > 15)\r\n      throw new Error(`[MT] Invalid padding length: ${  paddingLength}`)\r\n    const hashData = convertToUint8Array(dataWithPadding).subarray(0, offset)\r\n\r\n    const dataHash = await CryptoWorker.sha1Hash(hashData)\r\n\r\n    if (!bytesCmp(msgKey, bytesFromArrayBuffer(dataHash).slice(-16))) {\r\n      console.warn(msgKey, bytesFromArrayBuffer(dataHash))\r\n      throw new Error('[MT] server msgKey mismatch')\r\n    }\r\n\r\n    const buffer = bytesToArrayBuffer(messageBody)\r\n    const deserializerOptions = getDeserializeOpts(this.getMsgById)\r\n    const deserializerData = this.Deserialization(buffer, deserializerOptions)\r\n    const response = deserializerData.fetchObject('', 'INPUT')\r\n\r\n    return {\r\n      response,\r\n      messageID,\r\n      sessionID,\r\n      seqNo\r\n    }\r\n  }\r\n\r\n  applyServerSalt(newServerSalt: string) {\r\n    const serverSalt = longToBytes(newServerSalt)\r\n    this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\r\n\r\n    this.serverSalt = serverSalt\r\n    return true\r\n  }\r\n\r\n  sheduleRequest(delay: number = 0) {\r\n    if (this.offline) this.checkConnection('forced shedule')\r\n    const nextReq = tsNow() + delay\r\n\r\n    if (delay && this.nextReq && this.nextReq <= nextReq)\r\n      return false\r\n\r\n    // console.log(dTime(), 'shedule req', delay)\r\n    // console.trace()\r\n    smartTimeout.cancel(this.nextReqPromise)\r\n    if (delay > 0)\r\n      this.nextReqPromise = smartTimeout(\r\n        this.performSheduledRequest, delay)\r\n    else\r\n      immediate(this.performSheduledRequest)\r\n\r\n    this.nextReq = nextReq\r\n  }\r\n\r\n  ackMessage(msgID: string) {\r\n    /*console.trace(msgID)\r\n    if (this.pendingAcks.includes(msgID)) {\r\n      debugger\r\n    }*/\r\n    // console.log('ack message', msgID)\r\n    if (contains(msgID, this.pendingAcks)) return\r\n    this.pendingAcks.push(msgID)\r\n    this.sheduleRequest(30000)\r\n  }\r\n\r\n  reqResendMessage(msgID: string) {\r\n    log(`Req resend`)(msgID)\r\n    this.state.addResend(msgID)\r\n    this.sheduleRequest(100)\r\n  }\r\n\r\n  cleanupSent() {\r\n    let notEmpty = false\r\n      // console.log('clean start', this.dcID/*, this.state.sent*/)\r\n\r\n    for (const [msgID, message] of this.state.sentIterator()) {\r\n      let complete = true\r\n      if (message.notContentRelated && !this.state.hasPending(msgID))\r\n      // console.log('clean notContentRelated', msgID)\r\n        this.state.deleteSent(message)\r\n      else if (message instanceof NetContainer) {\r\n        for (const inner of message.inner) {\r\n          if (this.state.hasSent(inner)) {\r\n            // console.log('clean failed, found', msgID, message.inner[i],\r\n            // this.state.getSent(message.inner[i]).seq_no)\r\n            notEmpty = true\r\n            complete = false\r\n            break\r\n          }\r\n        }\r\n        // console.log('clean container', msgID)\r\n        if (complete)\r\n          this.state.deleteSent(message)\r\n      } else\r\n        notEmpty = true\r\n    }\r\n    return !notEmpty\r\n  }\r\n\r\n  processMessageAck = (messageID: string) => {\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage && !sentMessage.acked) {\r\n      delete sentMessage.body\r\n      sentMessage.acked = true\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  processError(rawError) {\r\n    const matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\r\n    rawError.error_code = uintToInt(rawError.error_code)\r\n\r\n    return new RawError({\r\n      code: !rawError.error_code || rawError.error_code <= 0\r\n        ? 500\r\n        : rawError.error_code,\r\n      type         : matches[1] || 'UNKNOWN',\r\n      description  : matches[3] || `CODE#${  rawError.error_code  } ${  rawError.error_message}`,\r\n      originalError: rawError\r\n    })\r\n  }\r\n\r\n  async processMessage(message, messageID, sessionID) {\r\n    const msgidInt = parseInt(messageID.toString(10).substr(0, -10), 10)\r\n    if (msgidInt % 2) {\r\n      console.warn('[MT] Server even message id: ', messageID, message)\r\n      return\r\n    }\r\n    // console.log('process message', message, messageID, sessionID)\r\n    switch (message._) {\r\n      case 'msg_container': {\r\n        for (const inner of message.messages)\r\n          await this.processMessage(inner, inner.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'bad_server_salt': {\r\n        log(`Bad server salt`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad server salt for invalid message')\r\n        }\r\n\r\n        this.applyServerSalt(message.new_server_salt)\r\n        this.pushResend(message.bad_msg_id)\r\n        this.ackMessage(messageID)\r\n        break\r\n      }\r\n      case 'bad_msg_notification': {\r\n        log(`Bad msg notification`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad msg notification for invalid message')\r\n        }\r\n\r\n        if (message.error_code == 16 || message.error_code == 17) {\r\n          if (applyServerTime(\r\n              rshift32(messageID)\r\n            )) {\r\n            log(`Update session`)()\r\n            this.updateSession()\r\n          }\r\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\r\n          this.pushResend(badMessage.msg_id)\r\n          this.ackMessage(messageID)\r\n        }\r\n        break\r\n      }\r\n      case 'message': {\r\n        if (this.lastServerMessages.indexOf(messageID) != -1) {\r\n          // console.warn('[MT] Server same messageID: ', messageID)\r\n          this.ackMessage(messageID)\r\n          return\r\n        }\r\n        this.lastServerMessages.push(messageID)\r\n        if (this.lastServerMessages.length > 100) {\r\n          this.lastServerMessages.shift()\r\n        }\r\n        await this.processMessage(message.body, message.msg_id, sessionID)\r\n        break\r\n      }\r\n      case 'new_session_created': {\r\n        this.ackMessage(messageID)\r\n\r\n        this.processMessageAck(message.first_msg_id)\r\n        this.applyServerSalt(message.server_salt)\r\n\r\n\r\n        const baseDcID = await this.storage.get('dc')\r\n        const updateCond =\r\n          baseDcID === this.dcID &&\r\n          !this.upload &&\r\n          updatesProcessor\r\n        if (updateCond)\r\n          updatesProcessor(message, true)\r\n\r\n        break\r\n      }\r\n      case 'msgs_ack': {\r\n        message.msg_ids.forEach(this.processMessageAck)\r\n        break\r\n      }\r\n      case 'msg_detailed_info': {\r\n        if (!this.state.hasSent(message.msg_id)) {\r\n          this.ackMessage(message.answer_msg_id)\r\n          break\r\n        }\r\n        break\r\n      }\r\n      case 'msg_new_detailed_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        this.reqResendMessage(message.answer_msg_id)\r\n        break\r\n      }\r\n      case 'msgs_state_info': {\r\n        this.ackMessage(message.answer_msg_id)\r\n        const spliceCond =\r\n          this.lastResendReq &&\r\n          //eslint-disable-next-line\r\n          this.lastResendReq.req_msg_id == message.req_msg_id;\r\n        if (spliceCond)\r\n          for (const badMsgID of this.lastResendReq.resend_msg_ids)\r\n            this.state.deleteResent(badMsgID)\r\n        break\r\n      }\r\n      case 'rpc_result': {\r\n        this.ackMessage(messageID)\r\n\r\n        const sentMessageID = message.req_msg_id\r\n        const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n        this.processMessageAck(sentMessageID)\r\n        if (!sentMessage) break\r\n\r\n        const deferred = sentMessage.deferred\r\n        if (message.result._ == 'rpc_error') {\r\n          const error = this.processError(message.result)\r\n          log(`ERROR, Rpc error`)(error)\r\n          const matched = error.type.match(/^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/)\r\n          if (matched && matched.length >= 2) {\r\n            const [ , , newDcID] = matched\r\n            if (+newDcID !== this.dcID) {\r\n              this.dcID = +newDcID\r\n              await this.storage.set('dc', +newDcID)\r\n\r\n            }\r\n\r\n          } else\r\n            log('non phone error')(error.code, error.description)\r\n          if (deferred) {\r\n            deferred.reject(error)\r\n          }\r\n        } else {\r\n          if (deferred) {\r\n            log(`Rpc response`)(message.result)\r\n              /*if (debug) {\r\n                console.log(dTime(), 'Rpc response', message.result)\r\n              } else {\r\n                let dRes = message.result._\r\n                if (!dRes)\r\n                  dRes = message.result.length > 5\r\n                    ? `[..${  message.result.length  }..]`\r\n                    : message.result\r\n                console.log(dTime(), 'Rpc response', dRes)\r\n              }*/\r\n            sentMessage.deferred.resolve(message.result)\r\n          }\r\n          if (sentMessage.isAPI)\r\n            this.connectionInited = true\r\n        }\r\n        this.state.deleteSent(sentMessage)\r\n        break\r\n      }\r\n      default: {\r\n        this.ackMessage(messageID)\r\n\r\n        // console.log('Update', message)\r\n        if (updatesProcessor) updatesProcessor(message, true)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass RawError extends Error {\r\n  constructor(obj: Object) {\r\n    super(`${obj.code} ${obj.type} ${obj.description}`)\r\n    this.code = obj.code\r\n    this.type = obj.type\r\n    this.description = obj.description\r\n    this.originalError = obj.originalError\r\n  }\r\n}\r\n\r\nexport type Networker = NetworkerThread\r\n\r\nexport const NetworkerFabric = (\r\n    appConfig,\r\n    { Serialization, Deserialization }: TLFabric,\r\n    storage: AsyncStorage,\r\n    emit: Emit) => chooseServer =>\r\n  (dc: number,\r\n    authKey: string,\r\n    serverSalt: string,\r\n    options: NetOptions = {}) =>\r\n  new NetworkerThread({\r\n    appConfig,\r\n    chooseServer,\r\n    Serialization,\r\n    Deserialization,\r\n    storage,\r\n    emit\r\n  }, dc, authKey, serverSalt, options)\r\n\r\n\r\nexport const getDeserializeOpts = msgGetter => ({\r\n  mtproto : true,\r\n  override: {\r\n    mt_message(result, field) {\r\n      result.msg_id = readLong(this.typeBuffer, `${ field }[msg_id]`)\r\n      result.seqno = readInt(this.typeBuffer, `${ field }[seqno]`)\r\n      result.bytes = readInt(this.typeBuffer, `${ field }[bytes]`)\r\n\r\n      const offset = this.getOffset()\r\n\r\n      try {\r\n        result.body = this.fetchObject('Object', `${ field }[body]`)\r\n      } catch (e) {\r\n        console.error(dTime(), 'parse error', e.message, e.stack)\r\n        result.body = { _: 'parse_error', error: e }\r\n      }\r\n      if (this.typeBuffer.offset != offset + result.bytes) {\r\n        // console.warn(dTime(), 'set offset', this.offset, offset, result.bytes)\r\n        // console.log(dTime(), result)\r\n        this.typeBuffer.offset = offset + result.bytes\r\n      }\r\n      // console.log(dTime(), 'override message', result)\r\n    },\r\n    mt_rpc_result(result, field: string) {\r\n      result.req_msg_id = readLong(this.typeBuffer, `${ field }[req_msg_id]`)\r\n\r\n      const sentMessage = msgGetter(result)\r\n      const type = sentMessage && sentMessage.resultType || 'Object'\r\n\r\n      if (result.req_msg_id && !sentMessage) {\r\n        // console.warn(dTime(), 'Result for unknown message', result)\r\n        return\r\n      }\r\n      result.result = this.fetchObject(type, `${ field }[result]`)\r\n        // console.log(dTime(), 'override rpc_result', sentMessage, type, result)\r\n    }\r\n  }\r\n})\r\n\r\nexport const startAll = () => {\r\n  if (akStopped) {\r\n    akStopped = false\r\n    updatesProcessor({ _: 'new_session_created' }, true)\r\n  }\r\n}\r\n\r\nexport const stopAll = () => akStopped = true\r\n\r\nexport const setUpdatesProcessor = callback =>\r\n  updatesProcessor = callback\r\n\r\nexport default NetworkerFabric\r\n\r\n\r\nconst verifyInnerMessages = (messages) => {\r\n  if (messages.length !== new Set(messages).size) {\r\n    console.log(`!!!!!!WARN!!!!!!`, 'container check failed', messages)\r\n      // throw new Error('Container bug')\r\n  }\r\n}\r\n\r\n\r\nasync function getMsgKeyIv(authKey: Uint8Array, msgKey: Uint8Array, isOut: boolean): * {\r\n  const x = isOut\r\n    ? 0\r\n    : 8\r\n  const sha1aText = new Uint8Array(48)\r\n  const sha1bText = new Uint8Array(48)\r\n  const sha1cText = new Uint8Array(48)\r\n  const sha1dText = new Uint8Array(48)\r\n  const promises = []\r\n\r\n  sha1aText.set(msgKey, 0)\r\n  sha1aText.set(authKey.subarray(x, x + 32), 16)\r\n  promises.push(CryptoWorker.sha1Hash(sha1aText))\r\n\r\n  sha1bText.set(authKey.subarray(x + 32, x + 48), 0)\r\n  sha1bText.set(msgKey, 16)\r\n  sha1bText.set(authKey.subarray(x + 48, x + 64), 32)\r\n  promises.push(CryptoWorker.sha1Hash(sha1bText))\r\n\r\n  sha1cText.set(authKey.subarray(x + 64, x + 96), 0)\r\n  sha1cText.set(msgKey, 32)\r\n  promises.push(CryptoWorker.sha1Hash(sha1cText))\r\n\r\n  sha1dText.set(msgKey, 0)\r\n  sha1dText.set(authKey.subarray(x + 96, x + 128), 16)\r\n  promises.push(CryptoWorker.sha1Hash(sha1dText))\r\n\r\n  const results = await Promise.all(promises)\r\n  const aesKey = new Uint8Array(32),\r\n        aesIv = new Uint8Array(32),\r\n        sha1a = new Uint8Array(results[0]),\r\n        sha1b = new Uint8Array(results[1]),\r\n        sha1c = new Uint8Array(results[2]),\r\n        sha1d = new Uint8Array(results[3])\r\n\r\n  aesKey.set(sha1a.subarray(0, 8))\r\n  aesKey.set(sha1b.subarray(8, 20), 8)\r\n  aesKey.set(sha1c.subarray(4, 16), 20)\r\n\r\n  aesIv.set(sha1a.subarray(8, 20))\r\n  aesIv.set(sha1b.subarray(0, 8), 12)\r\n  aesIv.set(sha1c.subarray(16, 20), 20)\r\n  aesIv.set(sha1d.subarray(0, 8), 24)\r\n\r\n  const result: [Uint8Array, Uint8Array] = [aesKey, aesIv]\r\n  return result\r\n}"]}